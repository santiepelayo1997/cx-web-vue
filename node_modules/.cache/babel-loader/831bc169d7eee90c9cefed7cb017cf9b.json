{"remainingRequest":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Branches.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Branches.vue","mtime":1575962500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Navigation from '@/components/Navigation.vue';\nimport Loader from '@/components/Loader.vue';\nimport TableList from '@/components/TableList.vue';\nimport FormBuilder from '@/components/FormBuilder.vue';\nimport axios from 'axios';\nexport default {\n  name: 'branches',\n  mounted: function mounted() {},\n  data: function data() {\n    return {\n      syncing: true,\n      showModal: false,\n      showModalUpdate: false,\n      showFields: {\n        \"orderBy\": \"updatedAt\",\n        \"orientation\": \"desc\",\n        \"list\": ['name', 'code', 'street', 'city', 'telephone']\n      },\n      colors: [{\n        \"blue\": \"#0ABCC1\",\n        \"penk\": \"#F38E9E\"\n      }],\n      iconButtons: [{\n        name: \"use\",\n        uiName: \"fas fa-pen\",\n        callName: \"retrieveData\",\n        accepting: [\"hashId\"]\n      }, {\n        name: \"use2\",\n        uiName: \"fas fa-times\",\n        callName: \"deactivateData\",\n        accepting: [\"hashId\"]\n      }],\n      btnAdd: [{\n        name: \"btnAdd\",\n        callName: \"btnAddModal\"\n      }],\n      btnClose: [{\n        name: \"btnClose\",\n        uiName: \"Cancel\",\n        callName: \"closeModal\"\n      }],\n      cardButton: [{\n        name: \"use\",\n        uiName: \"Create\",\n        callName: \"postData\",\n        className: \"btn btn-primary\"\n      }],\n      form: [{\n        name: \"name\",\n        inputId: \"name\",\n        labelName: \"Name:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Name\",\n        ifRequired: true,\n        inputType: \"varchar\"\n      }, {\n        name: \"shortName\",\n        inputId: \"shortName\",\n        labelName: \"Short Name:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Short Name\",\n        inputType: \"varchar\"\n      }, {\n        name: \"code\",\n        inputId: \"code\",\n        labelName: \"Code:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Code\",\n        ifRequired: true,\n        inputType: \"varchar\"\n      }, {\n        name: \"street\",\n        inputId: \"street\",\n        labelName: \"Street:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Street\",\n        ifRequired: true,\n        inputType: \"varchar\"\n      }, {\n        name: \"city\",\n        inputId: \"city\",\n        labelName: \"City:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input City\",\n        inputType: \"varchar\"\n      }, {\n        name: \"zipcode\",\n        inputId: \"zipcode\",\n        labelName: \"ZipCode:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input ZipCode\",\n        ifRequired: true,\n        inputType: \"varchar\"\n      }, {\n        name: \"country\",\n        inputId: \"country\",\n        labelName: \"Country:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Country\",\n        ifRequired: true,\n        inputType: \"varchar\"\n      }, {\n        name: \"telephone\",\n        inputId: \"telephone\",\n        labelName: \"Telephone:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Telephone\",\n        ifRequired: true,\n        inputType: \"number\"\n      }],\n      cardButtonUpdate: [{\n        name: \"use\",\n        uiName: \"Save\",\n        callName: \"putData\",\n        className: \"btn btn-primary\"\n      }],\n      colorPicker: [{\n        name: \"settings\",\n        colorPickerCol: \"col-md-12\",\n        inputType: \"colorPicker\"\n      }],\n      cardStyle: [{\n        color: 'white'\n      }],\n      iconColor: [{\n        color: 'white'\n      }],\n      indexedFilter: {\n        status: \"A\"\n      }\n    };\n  },\n  components: {\n    Navigation: Navigation,\n    Loader: Loader,\n    TableList: TableList,\n    FormBuilder: FormBuilder\n  },\n  methods: {\n    stopSync: function stopSync() {\n      this.syncing = false;\n    },\n    closeModal: function closeModal() {\n      this.$store.state.showModal = false;\n      this.$store.state.showModalUpdate = false;\n      this.$store.state.loading = false;\n      this.showModalUpdate = false;\n    },\n    openModal: function openModal() {\n      this.$store.state.showModal = true;\n    } //  validation: function(){\n    //     const form = document.querySelector('form');\n    //     var txt = \"\";\n    //     for (var i = 0; i < form.length; i++) {\n    //         if(form.elements[i].value ==\"\"){\n    //                 form.elements[i].classList.add('is-invalid')\n    //         }\n    //     }\n    //     this.saveNewData();\n    //  },   \n    //  async openModalUpdate (hashId){\n    //       this.showModalUpdate = true\n    //       let token = await localStorage.getItem(\"apiToken\");\n    //       let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //       localStorage.setItem('userHashUpdate', hashId)\n    //       let axiosConfig = {\n    //           headers: {\n    //               \"Authorization\": \"Bearer \"+ token\n    //           }\n    //       };\n    //       let res = await axios.get(apiDomain + 'branches/' + hashId, axiosConfig)\n    //      .then((res) => {\n    //           document.getElementById(\"name\").value = res.data.name\n    //           document.getElementById(\"code\").value = res.data.code\n    //           document.getElementById(\"street\").value = res.data.street\n    //           document.getElementById(\"city\").value = res.data.city\n    //           document.getElementById(\"zipcode\").value = res.data.zipcode\n    //           document.getElementById(\"country\").value  = res.data.country\n    //           document.getElementById(\"telephone\").value  = res.data.telephone\n    //           document.getElementById(\"shortName\").value = res.data.shortName\n    //       })\n    //      .catch((err) => {\n    //         console.log(\"AXIOS ERROR: \", err);\n    //      })\n    // },\n    //   async updateItem(){\n    //           let hashId = await localStorage.getItem(\"userHashUpdate\");\n    //           let token = await localStorage.getItem(\"apiToken\");\n    //           let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //           let res = await axios({\n    //               method: 'put',\n    //               url: apiDomain + 'branches/' + hashId ,\n    //               data: {\n    //                   name:  document.getElementById(\"name\").value,\n    //                   code:  document.getElementById(\"code\").value,\n    //                   street:  document.getElementById(\"street\").value,\n    //                   city:  document.getElementById(\"city\").value,\n    //                   zipcode:  document.getElementById(\"zipcode\").value,\n    //                   country:  document.getElementById(\"country\").value,\n    //                   telephone:  document.getElementById(\"telephone\").value,\n    //                   shortName:  document.getElementById(\"shortName\").value\n    //               },\n    //               headers: {\n    //                   Authorization: 'Bearer ' + token\n    //               }\n    //           })\n    //           .then((res) => {\n    //               this.showModalUpdate = false;\n    //               alert(\"Succesfully Updated!\");\n    //               this.refresh();\n    //           }) \n    //           .catch((err) => {\n    //               console.log(\"AXIOS ERROR: \", err);\n    //           })\n    // },\n    // refresh:function(){\n    //       setTimeout(function () { \n    //         location.reload();\n    //       }, 300);\n    // },\n    //  async saveNewData (){\n    //         let token = await localStorage.getItem(\"apiToken\");\n    //         let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //         let  postData = {\n    //               name:  document.getElementById(\"name\").value,\n    //               code:  document.getElementById(\"code\").value,\n    //               street:  document.getElementById(\"street\").value,\n    //               city:  document.getElementById(\"city\").value,\n    //               zipcode:  document.getElementById(\"zipcode\").value,\n    //               country:  document.getElementById(\"country\").value,\n    //               telephone:  document.getElementById(\"telephone\").value,\n    //               shortName:  document.getElementById(\"shortName\").value\n    //         }\n    //         let axiosConfig = {\n    //             headers: {\n    //                 \"Authorization\": \"Bearer \"+ token\n    //             }\n    //         };\n    //         let res = await axios.post(apiDomain + 'branches', postData, axiosConfig)\n    //         .then((res) => {\n    //            alert(\"Succesfully Added!\");\n    //             this.showModal = false\n    //              this.refresh();\n    //         })\n    //         .catch((err) => {\n    //           console.log(\"AXIOS ERROR: \", err);\n    //         })\n    //  },\n    //  async deactivateBranch(hashId){\n    //           let token = await localStorage.getItem(\"apiToken\");\n    //           let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //           let res = await axios({\n    //               method: 'put',\n    //               url: apiDomain + 'branches/' + hashId + '/deactivate',\n    //               data: {status: \"I\"},\n    //               headers: {\n    //                   Authorization: 'Bearer ' + token\n    //               }\n    //           })\n    //           .then((res) => {\n    //               alert(\"Succesfully Deactivated!\");\n    //                this.refresh();\n    //           })\n    //           .catch((err) => {\n    //               console.log(\"AXIOS ERROR: \", err);\n    //           })\n    //  }\n\n  },\n  watch: {},\n  computed: {}\n};",{"version":3,"sources":["Branches.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <Navigation/>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n                 <FormBuilder\r\n                    api-model=\"branches\" \r\n                    card-title=\"Create New Branch\"\r\n                    :card-button=\"cardButton\"\r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :card-input=\"form\"\r\n                    success-message=\"Branch Succesfully Added!\"\r\n                    :btn-close=\"btnClose\"\r\n                    v-if=\"this.$store.state.showModal\" \r\n                    @closeModal=\"closeModal\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                    :color-picker=\"colorPicker\"\r\n                 />\r\n\r\n                 \r\n                <FormBuilder\r\n                   api-model=\"branches\"\r\n                  card-title=\"Update Branch\"\r\n                  :card-button=\"cardButtonUpdate\"\r\n                  card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                  :card-input=\"form\"\r\n                  v-if=\"this.$store.state.showModalUpdate\" \r\n                  @closeModal=\"closeModal\"\r\n                  :btn-close=\"btnClose\"\r\n                  success-message=\"Branch Succesfully Updated!\"\r\n                  :loading=\"this.$store.state.loading\"\r\n                   :color-picker=\"colorPicker\"\r\n                 />\r\n\r\n                <div class=\"col-12\">\r\n                    <template v-if=\"syncing == true\">\r\n                    <Loader api-model=\"branches\" @doneLoading=\"stopSync\" :indexed-filter=\"indexedFilter\"/>\r\n                    </template>\r\n                    <template v-else>\r\n                    <TableList \r\n                    api-model=\"branches\" \r\n                    :card-input=\"form\"\r\n                    :color-picker=\"colorPicker\"\r\n                    table-name=\"Branches\"\r\n                    delete-message=\"Branch Succesfully Deactivated!\"\r\n                    :show-fields=\"showFields\" \r\n                    :indexed-filter=\"indexedFilter\"\r\n                    :icon-buttons=\"iconButtons\"\r\n                    :card-style=\"cardStyle\"\r\n                    :icon-color=\"iconColor\"\r\n                    :btn-add=\"btnAdd\"\r\n                    @btnAddModal=\"openModal\"\r\n                     \r\n                    />\r\n                    </template>\r\n                </div>\r\n               \r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport Navigation from '@/components/Navigation.vue'\r\nimport Loader from '@/components/Loader.vue'\r\nimport TableList from '@/components/TableList.vue'\r\nimport FormBuilder from '@/components/FormBuilder.vue'\r\n\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'branches',\r\n  mounted () {\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n                syncing: true,\r\n                showModal: false,\r\n                showModalUpdate: false,\r\n                showFields: {\r\n                    \"orderBy\": \"updatedAt\",\r\n                    \"orientation\": \"desc\",\r\n                    \"list\": ['name','code','street','city','telephone'],\r\n                },\r\n                colors: [\r\n                    {\r\n                        \"blue\": \"#0ABCC1\",\r\n                        \"penk\": \"#F38E9E\"\r\n                    }\r\n                ],\r\n                iconButtons: [\r\n                    {\r\n                      name: \"use\",\r\n                      uiName: \"fas fa-pen\",\r\n                      callName: \"retrieveData\",\r\n                      accepting: [\"hashId\"]\r\n                    },\r\n                    {\r\n                      name: \"use2\",\r\n                      uiName: \"fas fa-times\",\r\n                      callName: \"deactivateData\",\r\n                      accepting: [\"hashId\"]\r\n                    }\r\n                ],\r\n               btnAdd:[{\r\n                name:\"btnAdd\",\r\n                callName: \"btnAddModal\"\r\n              }],\r\n              btnClose: [\r\n                {\r\n                  name: \"btnClose\",\r\n                  uiName: \"Cancel\",\r\n                  callName: \"closeModal\",\r\n                }\r\n              ],\r\n               cardButton: [\r\n                  {\r\n                    name: \"use\",\r\n                    uiName: \"Create\",\r\n                    callName: \"postData\",\r\n                    className: \"btn btn-primary\"\r\n                  }\r\n                ],\r\n                form: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\"\r\n                },\r\n                {\r\n                  name: \"shortName\",\r\n                  inputId: \"shortName\",\r\n                  labelName: \"Short Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Short Name\",\r\n                  inputType: \"varchar\"\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Code\",\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\"\r\n                },\r\n                 {\r\n                  name: \"street\",\r\n                  inputId: \"street\",\r\n                  labelName: \"Street:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Street\",\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\"\r\n                },\r\n                {\r\n                  name: \"city\",\r\n                  inputId: \"city\",  \r\n                  labelName: \"City:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input City\",\r\n                  inputType: \"varchar\"\r\n                },\r\n                  {\r\n                  name: \"zipcode\",\r\n                  inputId: \"zipcode\",\r\n                  labelName: \"ZipCode:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input ZipCode\",\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\"\r\n                },\r\n                {\r\n                  name: \"country\",\r\n                  inputId: \"country\",\r\n                  labelName: \"Country:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Country\",\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\"  \r\n                },\r\n                {\r\n                  name: \"telephone\",\r\n                  inputId: \"telephone\",\r\n                  labelName: \"Telephone:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Telephone\",\r\n                  ifRequired: true,\r\n                  inputType: \"number\"\r\n                }\r\n              ],\r\n               cardButtonUpdate: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"putData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              colorPicker: [\r\n                {\r\n                    name: \"settings\",\r\n                    colorPickerCol: \"col-md-12\",\r\n                    inputType: \"colorPicker\"\r\n                }\r\n              ],\r\n             cardStyle: [\r\n                   {\r\n                    color: 'white'\r\n                   }\r\n             ],\r\n             iconColor: [\r\n                 {\r\n                     color:'white'\r\n                 }\r\n             ],\r\n            indexedFilter: {\r\n              status: \"A\"\r\n            }\r\n        }\r\n    },\r\n  components: {\r\n      Navigation,\r\n      Loader,\r\n      TableList,\r\n      FormBuilder\r\n  },\r\n  methods: {\r\n       stopSync: function () {\r\n            this.syncing = false\r\n        },\r\n        closeModal: function(){\r\n          this.$store.state.showModal = false\r\n          this.$store.state.showModalUpdate = false\r\n          this.$store.state.loading = false\r\n          this.showModalUpdate = false\r\n        },\r\n        openModal: function (){\r\n          this.$store.state.showModal = true\r\n        },\r\n      //  validation: function(){\r\n      //     const form = document.querySelector('form');\r\n      //     var txt = \"\";\r\n      //     for (var i = 0; i < form.length; i++) {\r\n      //         if(form.elements[i].value ==\"\"){\r\n      //                 form.elements[i].classList.add('is-invalid')\r\n      //         }\r\n      //     }\r\n      //     this.saveNewData();\r\n      //  },   \r\n      //  async openModalUpdate (hashId){\r\n      //       this.showModalUpdate = true\r\n\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       localStorage.setItem('userHashUpdate', hashId)\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //       };\r\n      //       let res = await axios.get(apiDomain + 'branches/' + hashId, axiosConfig)\r\n      //      .then((res) => {\r\n      //           document.getElementById(\"name\").value = res.data.name\r\n      //           document.getElementById(\"code\").value = res.data.code\r\n      //           document.getElementById(\"street\").value = res.data.street\r\n      //           document.getElementById(\"city\").value = res.data.city\r\n      //           document.getElementById(\"zipcode\").value = res.data.zipcode\r\n      //           document.getElementById(\"country\").value  = res.data.country\r\n      //           document.getElementById(\"telephone\").value  = res.data.telephone\r\n      //           document.getElementById(\"shortName\").value = res.data.shortName\r\n      //       })\r\n      //      .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      // },\r\n   \r\n      //   async updateItem(){\r\n      //           let hashId = await localStorage.getItem(\"userHashUpdate\");\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'branches/' + hashId ,\r\n      //               data: {\r\n      //                   name:  document.getElementById(\"name\").value,\r\n      //                   code:  document.getElementById(\"code\").value,\r\n      //                   street:  document.getElementById(\"street\").value,\r\n      //                   city:  document.getElementById(\"city\").value,\r\n      //                   zipcode:  document.getElementById(\"zipcode\").value,\r\n      //                   country:  document.getElementById(\"country\").value,\r\n      //                   telephone:  document.getElementById(\"telephone\").value,\r\n      //                   shortName:  document.getElementById(\"shortName\").value\r\n      //               },\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               this.showModalUpdate = false;\r\n      //               alert(\"Succesfully Updated!\");\r\n      //               this.refresh();\r\n      //           }) \r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      // },\r\n      // refresh:function(){\r\n      //       setTimeout(function () { \r\n      //         location.reload();\r\n      //       }, 300);\r\n      // },\r\n      //  async saveNewData (){\r\n\r\n      //         let token = await localStorage.getItem(\"apiToken\");\r\n      //         let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n\r\n      //         let  postData = {\r\n      //               name:  document.getElementById(\"name\").value,\r\n      //               code:  document.getElementById(\"code\").value,\r\n      //               street:  document.getElementById(\"street\").value,\r\n      //               city:  document.getElementById(\"city\").value,\r\n      //               zipcode:  document.getElementById(\"zipcode\").value,\r\n      //               country:  document.getElementById(\"country\").value,\r\n      //               telephone:  document.getElementById(\"telephone\").value,\r\n      //               shortName:  document.getElementById(\"shortName\").value\r\n      //         }\r\n              \r\n      //         let axiosConfig = {\r\n      //             headers: {\r\n      //                 \"Authorization\": \"Bearer \"+ token\r\n      //             }\r\n      //         };\r\n\r\n      //         let res = await axios.post(apiDomain + 'branches', postData, axiosConfig)\r\n      //         .then((res) => {\r\n               \r\n      //            alert(\"Succesfully Added!\");\r\n      //             this.showModal = false\r\n      //              this.refresh();\r\n\r\n      //         })\r\n      //         .catch((err) => {\r\n      //           console.log(\"AXIOS ERROR: \", err);\r\n      //         })\r\n         \r\n      //  },\r\n      //  async deactivateBranch(hashId){\r\n\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'branches/' + hashId + '/deactivate',\r\n      //               data: {status: \"I\"},\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Deactivated!\");\r\n      //                this.refresh();\r\n\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  }\r\n  },\r\n  watch:{\r\n  },\r\n  computed: {\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.card-body{\r\n  height: 139px !important;\r\n}\r\n.no-gutters{\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n}\r\n</style>"],"sourceRoot":"src/views"}]}