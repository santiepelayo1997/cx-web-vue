{"remainingRequest":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\PaymentChannels.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\PaymentChannels.vue","mtime":1577430582412},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Navigation from '@/components/Navigation.vue';\nimport Sidebar from '@/components/Sidebar.vue';\nimport Loader from '@/components/Loader.vue';\nimport TableList from '@/components/TableList.vue';\nimport FormBuilder from '@/components/FormBuilder.vue';\nimport axios from 'axios';\nexport default {\n  name: 'paymentchannels',\n  mounted: function mounted() {},\n  data: function data() {\n    return {\n      syncing: true,\n      showModal: false,\n      showModalUpdate: false,\n      loading: false,\n      loadingSave: false,\n      warningMessage: '',\n      isValidPhoto: true,\n      tableName: \"paymentchannels\",\n      photoUrl: '',\n      file: '',\n      showFields: {\n        \"orderBy\": \"updatedAt\",\n        \"orientation\": \"desc\",\n        \"list\": ['name', 'code']\n      },\n      iconButtons: [{\n        name: \"use\",\n        uiName: \"fas fa-pen\",\n        callName: \"retrieveData\",\n        accepting: [\"hashId\"]\n      }, {\n        name: \"use3\",\n        uiName: \"fas fa-times\",\n        callName: \"delete\",\n        accepting: [\"hashId\"]\n      }],\n      btnClose: [{\n        name: \"btnClose\",\n        uiName: \"Cancel\",\n        callName: \"closeModal\"\n      }],\n      btnAdd: [{\n        name: \"btnAdd\",\n        callName: \"btnAddModal\"\n      }],\n      cardButton: [{\n        name: \"use\",\n        uiName: \"Create\",\n        callName: \"postData\",\n        className: \"btn btn-primary\"\n      }],\n      cardButtonUpdate: [{\n        name: \"use\",\n        uiName: \"Save\",\n        callName: \"putData\",\n        className: \"btn btn-primary\"\n      }],\n      form: [{\n        name: \"name\",\n        labelName: \"Name:\",\n        inputId: \"name\",\n        cardInputCol: \"col-md-6\",\n        max: 31,\n        ifRequired: true,\n        inputType: \"varchar\",\n        errorName: \"Please input Name\"\n      }, {\n        name: \"code\",\n        labelName: \"Code:\",\n        inputId: \"code\",\n        cardInputCol: \"col-md-6\",\n        max: 30,\n        ifRequired: true,\n        inputType: \"varchar\",\n        errorName: \"Please input Code\"\n      }],\n      iconColor: [{\n        color: '#CBCBCB'\n      }],\n      indexedFilter: {\n        status: \"A\"\n      }\n    };\n  },\n  components: {\n    Navigation: Navigation,\n    Loader: Loader,\n    FormBuilder: FormBuilder,\n    Sidebar: Sidebar,\n    TableList: TableList\n  },\n  methods: {\n    stopSync: function stopSync() {\n      this.syncing = false;\n    },\n    closeModal: function closeModal() {\n      this.$store.state.showModal = false;\n      this.$store.state.showModalUpdate = false;\n      this.$store.state.loading = false;\n      this.showModalUpdate = false;\n    },\n    openModal: function openModal() {\n      this.$store.state.showModal = true;\n    },\n    openModalUpdate: function openModalUpdate() {\n      this.$store.state.showModalUpdate = true;\n    } //   async openModalUpdate (hashId){\n    //       this.showModalUpdate = true\n    //       let token = await localStorage.getItem(\"apiToken\");\n    //       let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //       localStorage.setItem('userHashUpdate', hashId)\n    //       let axiosConfig = {\n    //           headers: {\n    //               \"Authorization\": \"Bearer \"+ token\n    //           }\n    //       };\n    //       let res = await axios.get(apiDomain + 'paymentchannels/' + hashId, axiosConfig)\n    //      .then((res) => {\n    //             document.getElementById(\"name\").value = res.data.name\n    //             document.getElementById(\"code\").value = res.data.code\n    //       })\n    //      .catch((err) => {\n    //         console.log(\"AXIOS ERROR: \", err);\n    //      })\n    // },\n    //  validation: function(){\n    //     const form = document.querySelector('form');\n    //     var txt = \"\";\n    //     for (var i = 0; i < form.length; i++) {\n    //         if(form.elements[i].value ==\"\"){\n    //             form.elements[i].classList.add('is-invalid')\n    //               this.loading = false\n    //               this.loadingSave = false\n    //         }\n    //     }\n    //       this.saveItems();\n    //       this.loadingSave = true\n    //  },\n    // async updateItem(){\n    //         this.loading = true\n    //         let token = await localStorage.getItem(\"apiToken\");\n    //         let hashId = await localStorage.getItem(\"userHashUpdate\");\n    //         let photoUrl;\n    //         let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //         let formData = new FormData();\n    //                 let res = await axios({\n    //                   method: 'put',\n    //                   url: apiDomain + 'paymentchannels/' + hashId ,\n    //                   data: {\n    //                     name:  document.getElementById(\"name\").value,\n    //                     code:  document.getElementById(\"code\").value,\n    //                   },\n    //                   headers: {\n    //                       Authorization: 'Bearer ' + token\n    //                   }\n    //               })\n    //               .then((res) => {\n    //                   document.getElementById(\"alertSuccess\").style.display = \"\";\n    //                   document.getElementById('labelSuccess').innerHTML = \"Payment Channel has been succesfully updated!\"\n    //                   this.showModalUpdate = false;\n    //                   this.loading = false\n    //               })\n    //               .catch((err) => {\n    //                   this.loading = false\n    //                   document.getElementById(\"customAlert\").hidden=false;;\n    //                   document.getElementById(\"labelDanger2\").innerHTML =  err.response.data.error;\n    //                   console.log(\"AXIOS ERROR: \", err);\n    //               })\n    // },\n    // async deleteItem(hashId){\n    //       let token = await localStorage.getItem(\"apiToken\");\n    //       let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //       let res = await axios({\n    //           method: 'delete',\n    //           url: apiDomain + 'paymentchannels/' + hashId,\n    //           headers: {\n    //               Authorization: 'Bearer ' + token\n    //           }\n    //       })\n    //       .then((res) => {\n    //           document.getElementById(\"alertSuccess\").style.display = \"\";\n    //           document.getElementById('labelSuccess').innerHTML = \"Payment Channel has been Deleted!\"\n    //           location.reload();\n    //       })\n    //       .catch((err) => {\n    //           console.log(\"AXIOS ERROR: \", err);\n    //       })\n    // },\n    // async saveItems(){\n    //       let token = await localStorage.getItem(\"apiToken\");\n    //       let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //       let modelName = await localStorage.getItem(\"currentModelPage\")\n    //       let domain = await localStorage.getItem(\"domain\");\n    //       let  postData = {\n    //             name:  document.getElementById(\"name\").value,\n    //             code:  document.getElementById(\"code\").value,\n    //       }\n    //       let axiosConfig = {\n    //           headers: {\n    //               \"Authorization\": \"Bearer \"+ token\n    //           }\n    //       };\n    //       let res = await axios.post(apiDomain + 'paymentchannels', postData, axiosConfig)\n    //         .then((res) => {\n    //           console.log(res)\n    //             document.getElementById(\"alertSuccess\").style.display = \"\";\n    //             document.getElementById('labelSuccess').innerHTML = \"Payment Channel has been successfully Saved!\"\n    //             this.showModal = false\n    //             this.loadingSave = false\n    //             location.reload();\n    //             //this.reSync();\n    //       })\n    //       .catch((err) => {\n    //         this.loadingSave = false\n    //         document.getElementById(\"customAlert\").hidden=false;\n    //         document.getElementById('labelDanger').innerHTML =  err.response.data.error;\n    //         console.log(\"AXIOS ERROR: \", err);\n    //       })\n    // },\n    // refresh: async function() {\n    //       this.$root.$emit('Loader')\n    // }\n\n  },\n  watch: {},\n  computed: {}\n};",{"version":3,"sources":["PaymentChannels.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n     <Navigation/>\r\n     <div class=\"container-fluid\">\r\n             <div class=\"row\">\r\n                  <FormBuilder\r\n                   api-model=\"paymentchannels\"\r\n                  card-title=\"Create New Payment Channel\"\r\n                  :card-button=\"cardButton\"\r\n                  success-message=\"Payment Channel Succesfully Added!\"\r\n                  card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                  :card-input=\"form\"\r\n                  v-if=\"this.$store.state.showModal\"  \r\n                  @closeModal=\"closeModal\"\r\n                  :btn-close=\"btnClose\"\r\n                  :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n                <FormBuilder\r\n                  api-model=\"paymentchannels\"\r\n                  card-title=\"Update Payment Channel\"\r\n                  :card-button=\"cardButtonUpdate\"\r\n                  success-message=\"Payment Channel Succesfully Updated!\"\r\n                  card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                  :card-input=\"form\"\r\n                  v-if=\"this.$store.state.showModalUpdate\" \r\n                  @closeModal=\"closeModal\"\r\n                  :btn-close=\"btnClose\"\r\n                  :loading=\"this.$store.state.loading\"\r\n                 />\r\n                   <div class=\"col-md-12\">\r\n                    <!-- START OF TABLE LIST  -->\r\n                        <template v-if=\"syncing == true\">\r\n                              <Loader \r\n                                api-model=\"paymentchannels\" \r\n                                @doneLoading=\"stopSync\" \r\n                                :indexed-filter=\"indexedFilter\"\r\n                              />\r\n                        </template>\r\n                        <template v-else>\r\n                              <TableList\r\n                              api-model=\"paymentchannels\"\r\n                              table-name=\"Payment Channels\"\r\n                              :show-fields=\"showFields\"\r\n                              :card-input=\"form\"\r\n                              delete-message=\"Payment Channel Succesfully Deleted!\"\r\n                              :indexed-filter=\"indexedFilter\"\r\n                              :icon-buttons=\"iconButtons\"\r\n                              :btn-add=\"btnAdd\"\r\n                              :icon-color=\"iconColor\"\r\n                              :show-alert= \"true\"\r\n                              @btnAddModal=\"openModal\"\r\n                              @openModalUpdate=\"openModalUpdate\"\r\n                             />\r\n                        </template>\r\n\r\n\r\n                   <!-- END OF TABLE LIST -->\r\n                   </div>\r\n                        <div class=\"col-md-4\">\r\n                       </div>\r\n                 </div>\r\n           </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport Navigation from '@/components/Navigation.vue'\r\nimport Sidebar from '@/components/Sidebar.vue'\r\nimport Loader from '@/components/Loader.vue'\r\nimport TableList from '@/components/TableList.vue'\r\nimport FormBuilder from '@/components/FormBuilder.vue'\r\nimport axios from 'axios';\r\nexport default {\r\n  name: 'paymentchannels',\r\n  mounted () {\r\n    \r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n              syncing: true,\r\n              showModal: false,\r\n              showModalUpdate: false,\r\n              loading: false,\r\n              loadingSave: false,\r\n              warningMessage: '',\r\n              isValidPhoto: true,\r\n              tableName: \"paymentchannels\",\r\n              photoUrl: '',\r\n              file: '',\r\n              showFields: {\r\n                  \"orderBy\": \"updatedAt\",\r\n                  \"orientation\": \"desc\",\r\n                  \"list\": ['name','code']\r\n              },\r\n              iconButtons: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"fas fa-pen\",\r\n                  callName: \"retrieveData\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {  \r\n                  name: \"use3\",\r\n                  uiName: \"fas fa-times\",\r\n                  callName: \"delete\",\r\n                  accepting: [\"hashId\"]\r\n                }\r\n              ],\r\n              btnClose: [\r\n                {\r\n                  name: \"btnClose\",\r\n                  uiName: \"Cancel\",\r\n                  callName: \"closeModal\",\r\n                }\r\n              ],\r\n              btnAdd:[{\r\n                name:\"btnAdd\",\r\n                callName: \"btnAddModal\"\r\n              }],\r\n              \r\n              cardButton: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Create\",\r\n                  callName: \"postData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n             cardButtonUpdate: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"putData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              form: [\r\n                {\r\n                  name: \"name\",\r\n                  labelName: \"Name:\",\r\n                  inputId: \"name\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  max: 31,\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\",\r\n                  errorName: \"Please input Name\"\r\n                  \r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  labelName: \"Code:\",\r\n                  inputId: \"code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  max: 30,\r\n                  ifRequired: true,\r\n                  inputType: \"varchar\",\r\n                  errorName: \"Please input Code\"\r\n                }\r\n              ],\r\n              iconColor: [\r\n                 {\r\n                     color: '#CBCBCB'\r\n                 }\r\n              ],\r\n            indexedFilter:  {\r\n              status: \"A\"\r\n            }\r\n        }\r\n    },\r\n  components: {\r\n      Navigation,\r\n      Loader,\r\n      FormBuilder,\r\n      Sidebar,\r\n      TableList\r\n  },\r\n  methods: {\r\n        stopSync: function () {\r\n            this.syncing = false\r\n        },\r\n        closeModal: function(){\r\n            this.$store.state.showModal = false\r\n            this.$store.state.showModalUpdate = false\r\n            this.$store.state.loading = false\r\n            this.showModalUpdate = false\r\n        },\r\n        openModal: function (){\r\n            this.$store.state.showModal = true\r\n        },\r\n        openModalUpdate: function(){\r\n             this.$store.state.showModalUpdate = true\r\n        }\r\n      //   async openModalUpdate (hashId){\r\n      //       this.showModalUpdate = true\r\n\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       localStorage.setItem('userHashUpdate', hashId)\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //       };\r\n      //       let res = await axios.get(apiDomain + 'paymentchannels/' + hashId, axiosConfig)\r\n      //      .then((res) => {\r\n      //             document.getElementById(\"name\").value = res.data.name\r\n      //             document.getElementById(\"code\").value = res.data.code\r\n                 \r\n      //       })\r\n      //      .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      // },\r\n      //  validation: function(){\r\n         \r\n      //     const form = document.querySelector('form');\r\n      //     var txt = \"\";\r\n      //     for (var i = 0; i < form.length; i++) {\r\n      //         if(form.elements[i].value ==\"\"){\r\n      //             form.elements[i].classList.add('is-invalid')\r\n      //               this.loading = false\r\n      //               this.loadingSave = false\r\n      //         }\r\n      //     }\r\n      //       this.saveItems();\r\n      //       this.loadingSave = true\r\n        \r\n      //  },\r\n      // async updateItem(){\r\n      //         this.loading = true\r\n            \r\n      //         let token = await localStorage.getItem(\"apiToken\");\r\n      //         let hashId = await localStorage.getItem(\"userHashUpdate\");\r\n      //         let photoUrl;\r\n      //         let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //         let formData = new FormData();\r\n\r\n\r\n      //                 let res = await axios({\r\n      //                   method: 'put',\r\n      //                   url: apiDomain + 'paymentchannels/' + hashId ,\r\n      //                   data: {\r\n      //                     name:  document.getElementById(\"name\").value,\r\n      //                     code:  document.getElementById(\"code\").value,\r\n      //                   },\r\n      //                   headers: {\r\n      //                       Authorization: 'Bearer ' + token\r\n      //                   }\r\n      //               })\r\n      //               .then((res) => {\r\n      //                   document.getElementById(\"alertSuccess\").style.display = \"\";\r\n      //                   document.getElementById('labelSuccess').innerHTML = \"Payment Channel has been succesfully updated!\"\r\n      //                   this.showModalUpdate = false;\r\n      //                   this.loading = false\r\n                     \r\n      //               })\r\n      //               .catch((err) => {\r\n      //                   this.loading = false\r\n      //                   document.getElementById(\"customAlert\").hidden=false;;\r\n      //                   document.getElementById(\"labelDanger2\").innerHTML =  err.response.data.error;\r\n      //                   console.log(\"AXIOS ERROR: \", err);\r\n      //               })\r\n         \r\n\r\n             \r\n      // },\r\n      // async deleteItem(hashId){\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       let res = await axios({\r\n      //           method: 'delete',\r\n      //           url: apiDomain + 'paymentchannels/' + hashId,\r\n      //           headers: {\r\n      //               Authorization: 'Bearer ' + token\r\n      //           }\r\n      //       })\r\n      //       .then((res) => {\r\n      //           document.getElementById(\"alertSuccess\").style.display = \"\";\r\n      //           document.getElementById('labelSuccess').innerHTML = \"Payment Channel has been Deleted!\"\r\n      //           location.reload();\r\n      //       })\r\n      //       .catch((err) => {\r\n      //           console.log(\"AXIOS ERROR: \", err);\r\n      //       })\r\n      // },\r\n      // async saveItems(){\r\n            \r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //       let domain = await localStorage.getItem(\"domain\");\r\n       \r\n\r\n      //       let  postData = {\r\n      //             name:  document.getElementById(\"name\").value,\r\n      //             code:  document.getElementById(\"code\").value,\r\n      //       }\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //       };\r\n\r\n      //       let res = await axios.post(apiDomain + 'paymentchannels', postData, axiosConfig)\r\n      //         .then((res) => {\r\n      //           console.log(res)\r\n      //             document.getElementById(\"alertSuccess\").style.display = \"\";\r\n      //             document.getElementById('labelSuccess').innerHTML = \"Payment Channel has been successfully Saved!\"\r\n      //             this.showModal = false\r\n      //             this.loadingSave = false\r\n      //             location.reload();\r\n      //             //this.reSync();\r\n      //       })\r\n      //       .catch((err) => {\r\n      //         this.loadingSave = false\r\n      //         document.getElementById(\"customAlert\").hidden=false;\r\n      //         document.getElementById('labelDanger').innerHTML =  err.response.data.error;\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //       })\r\n          \r\n      // },\r\n      // refresh: async function() {\r\n      //       this.$root.$emit('Loader')\r\n      // }\r\n  },\r\n  watch:{\r\n  },\r\n  computed: {\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\nbody{\r\n  overflow: hidden !important;\r\n}\r\n.add {\r\n  color: #7808F7;\r\n  font-size:25px;\r\n}\r\n#notS{\r\n  color: #0BBEBA;\r\n}\r\n#sku {\r\n  color: #0BBEBA;\r\n}\r\n#btnProductPrice{\r\n  color: #0BBEBA;\r\n  border-color: #0BBEBA;\r\n}\r\n#btnProductPrice:hover{\r\n  color:white;\r\n  background-color: #0BBEBA;\r\n}\r\n</style>"],"sourceRoot":"src/views"}]}