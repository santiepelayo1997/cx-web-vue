{"remainingRequest":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Login.vue","mtime":1579574161192},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\iRipple\\\\Desktop\\\\cx-web-vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport { setInterval } from 'timers';\nvar localStorage = window.localStorage;\nexport default {\n  name: 'login',\n  mounted: function mounted() {\n    var _this = this;\n\n    localStorage.removeItem(\"isAdmin\");\n    this.loginAttemptCounter = localStorage.getItem(\"loginAttemptCounter\") || 0;\n    this.loginWaitingTime = localStorage.getItem(\"loginWaitingTime\") || 0;\n\n    if (this.loginWaitingTime > 0) {\n      this.$refs.loginButton.disabled = true;\n      this.loginInterval = setInterval(function () {\n        _this.loginWaitingTime--;\n      }, 1000);\n    }\n\n    this.$store.dispatch('getApiDomain');\n  },\n  data: function data() {\n    return {\n      accountName: '',\n      email: '',\n      password: '',\n      loginAttemptCounter: 0,\n      loginMessage: '',\n      userHashId: '',\n      loginWaitingTime: 0,\n      loginInterval: null,\n      loginProcessMsg: '',\n      loggingIn: false\n    };\n  },\n  methods: {\n    //   getUserHash:function(){\n    //         this.loggingIn = true\n    //         this.loginMsg = ''\n    //         this.loginAttemptCounter++;\n    //          if(this.loginAttemptCounter < 5)\n    //          {\n    //                 this.loginProcessMsg = \"Authenticating...\"\n    //                 axios.post(this.$store.getters.apiDomain +'tokens', {\n    //                     \"email\": this.email,\n    //                     \"password\": this.password,\n    //                     \"account\": this.accountName\n    //                 })\n    //                 .then(async (response) => {\n    //                     this.userHashId = response.data.userHashId\n    //                     localStorage.setItem('currentUser',response.data.userHashId)\n    //                     this.$store.state.db.tokens.add(response.data)\n    //                     this.loginProcessMsg = \"Getting user profile\"\n    //                     this.loginValidation(response.data.userHashId, response.data.token);\n    //                 })\n    //                 .catch((err) => {\n    //                     console.log(err)\n    //                     if(err.response === undefined){\n    //                         this.loginMessage = \"Login failed. Unable to contact server\"\n    //                         this.loginAttemptCounter--; //failed auth\n    //                     }else if(err.response.status == 403){\n    //                         this.loginMessage = \"Login failed. Invalid credentials\"\n    //                     }else{\n    //                         this.loginMessage = \"Login failed. Response code: \"+err.response.status\n    //                         this.loginAttemptCounter--; //failed auth, revert attempt\n    //                     }\n    //                     this.loggingIn = false\n    //                 })\n    //          }\n    //          else\n    //          {\n    //                 this.loggingIn = false\n    //                 if(this.loginWaitingTime == 0){\n    //                     this.$refs.loginButton.disabled = true\n    //                     this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\n    //                 }\n    //                 this.loginWaitingTime += 60\n    //          }\n    //   },\n    //   async loginValidation(userHashId,token){\n    //            await axios.get(this.$store.getters.apiDomain+\"users/\"+userHashId, {\n    //                 headers:{\n    //                     Authorization:'Bearer '+ token\n    //                 },\n    //             })\n    //             .then(async (res) =>{\n    //                 this.loginProcessMsg = \"Building user profile\"\n    //                 await this.$store.state.db.users.put(res.data)\n    //                 await this.$store.dispatch('isSuperAdmin')\n    //                 //current account\n    //                 localStorage.setItem('currentAccount',res.data.accountHashId)\n    //                 //redirect\n    //                 this.$router.push('/Products')\n    //             })\n    //             .catch((autherr) => {\n    //                 if(autherr.response === undefined){\n    //                     this.loginMessage = \"Fetch failed. Unable to contact server\"\n    //                 }else if(autherr.response.status == 403){\n    //                     this.loginMessage = \"Fetch failed. User does not exist\"\n    //                 }else{\n    //                     this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\n    //                 }\n    //                 this.loggingIn = false\n    //             })\n    //   },\n    getBase64Image: function getBase64Image(img) {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      var dataURL = canvas.toDataURL(\"image/png\");\n      return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    },\n    attemptLogin: function attemptLogin() {\n      var _this2 = this;\n\n      this.loggingIn = true;\n      this.loginMsg = '';\n      this.loginAttemptCounter++;\n\n      if (this.loginAttemptCounter < 5) {\n        this.loginProcessMsg = \"Authenticating...\";\n        axios.post(this.$store.getters.apiDomain + 'tokens', {\n          \"email\": this.email,\n          \"password\": this.password,\n          \"account\": this.accountName\n        }).then(\n        /*#__PURE__*/\n        function () {\n          var _ref = _asyncToGenerator(\n          /*#__PURE__*/\n          regeneratorRuntime.mark(function _callee2(response) {\n            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    console.log(response);\n\n                    if (!(response.status == 200)) {\n                      _context2.next = 12;\n                      break;\n                    }\n\n                    _this2.loginAttemptCounter = 0;\n                    _this2.loginProcessMsg = \"Authenticated\";\n                    localStorage.setItem(\"apiToken\", response.data.token); // console.log(response.data.userHashId)\n                    //store token\n\n                    localStorage.setItem('currentUser', response.data.userHashId);\n\n                    _this2.$store.state.db.tokens.add(response.data);\n\n                    _this2.loginProcessMsg = \"Getting user profile\";\n                    _context2.next = 10;\n                    return axios.get(_this2.$store.getters.apiDomain + \"users/\" + response.data.userHashId, {\n                      headers: {\n                        Authorization: 'Bearer ' + response.data.token\n                      }\n                    }).then(\n                    /*#__PURE__*/\n                    function () {\n                      var _ref2 = _asyncToGenerator(\n                      /*#__PURE__*/\n                      regeneratorRuntime.mark(function _callee(res) {\n                        return regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                _this2.loginProcessMsg = \"Building user profile\"; // imgData = getBase64Image(res.data.photoUrl);\n                                // localStorage.setItem(\"imgData\", imgData);\n\n                                _context.next = 3;\n                                return _this2.$store.state.db.users.put(res.data);\n\n                              case 3:\n                                _this2.$store.dispatch('getUserDetails', res.data.hashId);\n\n                                localStorage.setItem('userHashId', res.data.hashId);\n                                _context.next = 7;\n                                return _this2.$store.dispatch('isSuperAdmin');\n\n                              case 7:\n                                //current account\n                                localStorage.setItem('currentAccount', res.data.accountHashId); //redirect\n\n                                _this2.$router.push('/main');\n\n                              case 9:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n\n                      return function (_x2) {\n                        return _ref2.apply(this, arguments);\n                      };\n                    }()).catch(function (autherr) {\n                      if (autherr.response === undefined) {\n                        _this2.loginMessage = \"Fetch failed. Unable to contact server\";\n                      } else if (autherr.response.status == 403) {\n                        _this2.loginMessage = \"Fetch failed. User does not exist\";\n                      } else {\n                        _this2.loginMessage = \"Fetch failed. Response code: \" + autherr.response.status;\n                      }\n\n                      _this2.loggingIn = false;\n                    });\n\n                  case 10:\n                    _context2.next = 13;\n                    break;\n\n                  case 12:\n                    _this2.loginMessage = \"Login failed. Response code: \" + response.status;\n\n                  case 13:\n                    _this2.loggingIn = false;\n\n                  case 14:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          console.log(err);\n\n          if (err.response === undefined) {\n            _this2.loginMessage = \"Login failed. Unable to contact server\";\n            _this2.loginAttemptCounter--; //failed auth\n          } else if (err.response.status == 403) {\n            _this2.loginMessage = \"Login failed. Invalid credentials\";\n          } else {\n            _this2.loginMessage = \"Login failed. Response code: \" + err.response.status;\n            _this2.loginAttemptCounter--; //failed auth, revert attempt\n          }\n\n          _this2.loggingIn = false;\n        });\n      } else {\n        this.loggingIn = false;\n\n        if (this.loginWaitingTime == 0) {\n          this.$refs.loginButton.disabled = true;\n          this.loginInterval = setInterval(function () {\n            _this2.loginWaitingTime--;\n          }, 1000);\n        }\n\n        this.loginWaitingTime += 60;\n      }\n    }\n  },\n  watch: {\n    loginAttemptCounter: function loginAttemptCounter() {\n      localStorage.setItem(\"loginAttemptCounter\", this.loginAttemptCounter);\n\n      if (this.loginAttemptCounter >= 5) {\n        this.loginMessage = 'Too many failed login attempts.';\n      }\n    },\n    loginWaitingTime: function loginWaitingTime() {\n      localStorage.setItem(\"loginWaitingTime\", this.loginWaitingTime);\n\n      if (this.loginWaitingTime <= 0) {\n        localStorage.setItem(\"loginWaitingTime\", 0);\n        this.loginAttemptCounter = 0;\n        this.loginMessage = 'Enter your account, email, and password';\n        clearInterval(this.loginInterval);\n        this.$refs.loginButton.disabled = false;\n      }\n    }\n  },\n  computed: {\n    loginWaitingTimeStr: function loginWaitingTimeStr() {\n      var str = '';\n\n      if (this.loginWaitingTime / 60 >= 1) {\n        str = parseInt(this.loginWaitingTime / 60) + ' minute(s) and ';\n      }\n\n      str += this.loginWaitingTime % 60 + ' seconds';\n      return str;\n    }\n  }\n};",{"version":3,"sources":["Login.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"login full-height container-fluid\">\r\n      <div class=\"row full-height\">\r\n          <div class=\"col-md-8 full-height d-none d-md-block\">\r\n              \r\n          </div>\r\n          <div class=\"d-flex col-md-4 full-height col-sm-12 login-tab align-items-center\">\r\n              <div class=\"text-center col-md-12\">\r\n                <h1>Barter CX+</h1>\r\n                <div class=\"d-block floating-message-box\">{{ loginMessage }}</div>\r\n                <div class=\"d-block floating-message-box\"><span v-if=\"loginWaitingTime > 0\">Please wait for {{loginWaitingTimeStr}} </span></div>\r\n                <form v-on:submit.prevent=\"attemptLogin()\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Account\" v-model=\"accountName\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <input type=\"email\" class=\"form-control\" placeholder=\"Email\" v-model=\"email\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <input type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"password\">\r\n                  </div>\r\n                  <button type=\"submit\" ref=\"loginButton\" class=\"btn btn-primary\" @click=\"attemptLogin()\">Authenticate</button>\r\n                  <br>\r\n                  <br>\r\n                  <div class=\"d-flex align-items-center col-md-12 justify-content-center\" v-if=\"loggingIn\">\r\n                    <div class=\"spinner-border\" role=\"status\">\r\n                        <span class=\"sr-only\">Loading..</span>\r\n                    </div> {{ loginProcessMsg }}\r\n                  </div>\r\n                </form>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from 'axios';\r\nimport { setInterval } from 'timers';\r\nconst localStorage = window.localStorage;\r\n\r\nexport default {\r\n  name: 'login',\r\n  mounted () {\r\n      localStorage.removeItem(\"isAdmin\");\r\n      this.loginAttemptCounter = localStorage.getItem(\"loginAttemptCounter\") || 0\r\n      this.loginWaitingTime = localStorage.getItem(\"loginWaitingTime\") || 0\r\n      if(this.loginWaitingTime > 0){\r\n          this.$refs.loginButton.disabled = true\r\n          this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n      }\r\n       this.$store.dispatch('getApiDomain');\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n            accountName: '',\r\n            email: '',\r\n            password: '',\r\n            loginAttemptCounter: 0,\r\n            loginMessage: '',\r\n            userHashId: '',\r\n            loginWaitingTime: 0,\r\n            loginInterval: null,\r\n            loginProcessMsg: '',\r\n            loggingIn: false\r\n        }\r\n    },\r\n  methods: {\r\n    //   getUserHash:function(){\r\n    //         this.loggingIn = true\r\n    //         this.loginMsg = ''\r\n    //         this.loginAttemptCounter++;\r\n\r\n    //          if(this.loginAttemptCounter < 5)\r\n    //          {\r\n    //                 this.loginProcessMsg = \"Authenticating...\"\r\n                   \r\n    //                 axios.post(this.$store.getters.apiDomain +'tokens', {\r\n    //                     \"email\": this.email,\r\n    //                     \"password\": this.password,\r\n    //                     \"account\": this.accountName\r\n    //                 })\r\n    //                 .then(async (response) => {\r\n    //                     this.userHashId = response.data.userHashId\r\n    //                     localStorage.setItem('currentUser',response.data.userHashId)\r\n    //                     this.$store.state.db.tokens.add(response.data)\r\n    //                     this.loginProcessMsg = \"Getting user profile\"\r\n    //                     this.loginValidation(response.data.userHashId, response.data.token);\r\n    //                 })\r\n    //                 .catch((err) => {\r\n    //                     console.log(err)\r\n    //                     if(err.response === undefined){\r\n    //                         this.loginMessage = \"Login failed. Unable to contact server\"\r\n    //                         this.loginAttemptCounter--; //failed auth\r\n    //                     }else if(err.response.status == 403){\r\n    //                         this.loginMessage = \"Login failed. Invalid credentials\"\r\n    //                     }else{\r\n    //                         this.loginMessage = \"Login failed. Response code: \"+err.response.status\r\n    //                         this.loginAttemptCounter--; //failed auth, revert attempt\r\n    //                     }\r\n    //                     this.loggingIn = false\r\n    //                 })\r\n    //          }\r\n    //          else\r\n    //          {\r\n    //                 this.loggingIn = false\r\n    //                 if(this.loginWaitingTime == 0){\r\n    //                     this.$refs.loginButton.disabled = true\r\n    //                     this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n    //                 }\r\n    //                 this.loginWaitingTime += 60\r\n    //          }\r\n    //   },\r\n    //   async loginValidation(userHashId,token){\r\n    //            await axios.get(this.$store.getters.apiDomain+\"users/\"+userHashId, {\r\n    //                 headers:{\r\n    //                     Authorization:'Bearer '+ token\r\n    //                 },\r\n    //             })\r\n    //             .then(async (res) =>{\r\n    //                 this.loginProcessMsg = \"Building user profile\"\r\n    //                 await this.$store.state.db.users.put(res.data)\r\n    //                 await this.$store.dispatch('isSuperAdmin')\r\n    //                 //current account\r\n    //                 localStorage.setItem('currentAccount',res.data.accountHashId)\r\n    //                 //redirect\r\n    //                 this.$router.push('/Products')\r\n    //             })\r\n    //             .catch((autherr) => {\r\n    //                 if(autherr.response === undefined){\r\n    //                     this.loginMessage = \"Fetch failed. Unable to contact server\"\r\n    //                 }else if(autherr.response.status == 403){\r\n    //                     this.loginMessage = \"Fetch failed. User does not exist\"\r\n    //                 }else{\r\n    //                     this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\r\n    //                 }\r\n    //                 this.loggingIn = false\r\n    //             })\r\n    //   },\r\n    getBase64Image(img) {\r\n          var canvas = document.createElement(\"canvas\");\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n\r\n          var ctx = canvas.getContext(\"2d\");\r\n          ctx.drawImage(img, 0, 0);\r\n\r\n          var dataURL = canvas.toDataURL(\"image/png\");\r\n\r\n          return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\r\n      },\r\n      attemptLogin(){\r\n          this.loggingIn = true\r\n          this.loginMsg = ''\r\n          this.loginAttemptCounter++;\r\n          if(this.loginAttemptCounter < 5){\r\n            this.loginProcessMsg = \"Authenticating...\"\r\n       \r\n            axios.post(this.$store.getters.apiDomain +'tokens', {\r\n                \"email\": this.email,\r\n                \"password\": this.password,\r\n                \"account\": this.accountName\r\n            })\r\n            .then(async (response) => {\r\n                console.log(response)\r\n              if(response.status == 200){\r\n                this.loginAttemptCounter = 0\r\n                this.loginProcessMsg = \"Authenticated\"\r\n                localStorage.setItem(\"apiToken\",response.data.token);\r\n               // console.log(response.data.userHashId)\r\n                //store token\r\n                localStorage.setItem('currentUser',response.data.userHashId)\r\n                this.$store.state.db.tokens.add(response.data)\r\n                this.loginProcessMsg = \"Getting user profile\"\r\n              \r\n                await axios.get(this.$store.getters.apiDomain+\"users/\"+response.data.userHashId, {\r\n                    headers:{\r\n                        Authorization:'Bearer '+response.data.token\r\n                    },\r\n                })\r\n                .then(async (res) =>{\r\n                    this.loginProcessMsg = \"Building user profile\"\r\n                    // imgData = getBase64Image(res.data.photoUrl);\r\n                    // localStorage.setItem(\"imgData\", imgData);\r\n                    await this.$store.state.db.users.put(res.data)\r\n                    this.$store.dispatch('getUserDetails', res.data.hashId)\r\n                    localStorage.setItem('userHashId', res.data.hashId)\r\n                    await this.$store.dispatch('isSuperAdmin')\r\n                    //current account\r\n                    localStorage.setItem('currentAccount',res.data.accountHashId)\r\n                    //redirect\r\n                    this.$router.push('/main')\r\n                })\r\n                .catch((autherr) => {\r\n                    if(autherr.response === undefined){\r\n                        this.loginMessage = \"Fetch failed. Unable to contact server\"\r\n                    }else if(autherr.response.status == 403){\r\n                        this.loginMessage = \"Fetch failed. User does not exist\"\r\n                    }else{\r\n                        this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\r\n                    }\r\n                    this.loggingIn = false\r\n                })\r\n              }else{\r\n                this.loginMessage = \"Login failed. Response code: \"+response.status\r\n              }\r\n              this.loggingIn = false\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                if(err.response === undefined){\r\n                    this.loginMessage = \"Login failed. Unable to contact server\"\r\n                    this.loginAttemptCounter--; //failed auth\r\n                }else if(err.response.status == 403){\r\n                    this.loginMessage = \"Login failed. Invalid credentials\"\r\n                }else{\r\n                    this.loginMessage = \"Login failed. Response code: \"+err.response.status\r\n                    this.loginAttemptCounter--; //failed auth, revert attempt\r\n                }\r\n                this.loggingIn = false\r\n            })\r\n          }else{\r\n              this.loggingIn = false\r\n              if(this.loginWaitingTime == 0){\r\n                  this.$refs.loginButton.disabled = true\r\n                  this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n              }\r\n              this.loginWaitingTime += 60\r\n          }\r\n      },\r\n  },\r\n  watch:{\r\n    loginAttemptCounter(){\r\n        localStorage.setItem(\"loginAttemptCounter\",this.loginAttemptCounter)\r\n        if(this.loginAttemptCounter >= 5){\r\n            this.loginMessage = 'Too many failed login attempts.'\r\n        }\r\n    },\r\n    loginWaitingTime(){\r\n        localStorage.setItem(\"loginWaitingTime\",this.loginWaitingTime)\r\n        if(this.loginWaitingTime <= 0){\r\n            localStorage.setItem(\"loginWaitingTime\",0)\r\n            this.loginAttemptCounter = 0\r\n            this.loginMessage = 'Enter your account, email, and password'\r\n            clearInterval(this.loginInterval)\r\n            this.$refs.loginButton.disabled = false\r\n        }\r\n    }\r\n  },\r\n  computed: {\r\n      loginWaitingTimeStr(){\r\n        var str = ''\r\n        if(this.loginWaitingTime/60 >= 1){\r\n            str = parseInt(this.loginWaitingTime/60)+' minute(s) and '\r\n        }\r\n        str += (this.loginWaitingTime%60)+' seconds'\r\n        return str\r\n      }\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.full-height{\r\n    height: 100vh;\r\n}\r\n\r\n\r\n.floating-message-box{\r\n    min-height: 20px;\r\n    font-size: 15px;\r\n}\r\n\r\n</style>"],"sourceRoot":"src/views"}]}