{"remainingRequest":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Users.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Users.vue","mtime":1576733974000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\iRipple\\\\Desktop\\\\cx-web-vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Navigation from '@/components/Navigation.vue';\nimport Sidebar from '@/components/Sidebar.vue';\nimport Loader from '@/components/Loader.vue';\nimport TableList from '@/components/TableList.vue';\nimport FormBuilder from '@/components/FormBuilder.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Users',\n  mounted: function mounted() {\n    var tableName = this.$store.state.userGroupName;\n    this.$store.dispatch('getBranches');\n  },\n  data: function data() {\n    return {\n      showModal: false,\n      showModalChangePass: false,\n      showModalUpdate: false,\n      syncing: true,\n      photoUrl: '',\n      file: '',\n      tableName: this.$store.state.userGroupName,\n      showFields: {\n        \"orderBy\": \"email\",\n        \"orientation\": \"asc\",\n        \"list\": ['name', 'code', 'mobileNo', 'email']\n      },\n      iconButtons: [{\n        name: \"use\",\n        uiName: \"fas fa-pen\",\n        callName: \"retrieveData\",\n        accepting: [\"hashId\"]\n      }, {\n        name: \"deleteUser\",\n        uiName: \"fas fa-times\",\n        callName: \"delete\",\n        accepting: [\"hashId\"]\n      }, {\n        name: \"blockData\",\n        uiName: \"fas fa-ban\",\n        callName: \"block\",\n        accepting: [\"hashId\"]\n      }, {\n        name: \"block\",\n        uiName: \"fas fa-user-edit\",\n        callName: \"openChangePassModal\",\n        accepting: [\"hashId\"]\n      }],\n      btnAdd: [{\n        name: \"btnAdd\",\n        callName: \"btnAddModal\"\n      }],\n      btnBack: [{\n        tableName: \"Roles\",\n        callName: \"btnBack\"\n      }],\n      btnClose: [{\n        name: \"btnClose\",\n        uiName: \"Cancel\",\n        callName: \"closeModal\"\n      }],\n      cardButtonUpdate: [{\n        name: \"use\",\n        uiName: \"Save\",\n        callName: \"putData\",\n        className: \"btn btn-primary\"\n      }],\n      formChangePass: [{\n        name: \"password\",\n        inputId: \"password\",\n        labelName: \"New Password:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input New Password\",\n        type: \"password\",\n        inputType: \"password\",\n        ifRequired: true,\n        max: 200\n      }, {\n        name: \"confirmPassword\",\n        inputId: \"confirmPassword\",\n        labelName: \"Confirm Password:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Password did not match..\",\n        type: \"password\",\n        inputType: \"password\",\n        ifRequired: true,\n        max: 200\n      }],\n      form: [{\n        name: \"name\",\n        inputId: \"name\",\n        labelName: \"Name:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Name\",\n        inputType: \"varchar\",\n        max: 120,\n        ifRequired: true\n      }, {\n        name: \"code\",\n        inputId: \"code\",\n        labelName: \"Code:\",\n        errorName: \"Please input Code\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"varchar\",\n        max: 50\n      }, {\n        name: \"userName\",\n        inputId: \"userName\",\n        errorName: \"Please input Username\",\n        labelName: \"Username:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"varchar\",\n        max: 120\n      }, {\n        name: \"mobileNo\",\n        inputId: \"mobileNo\",\n        errorName: \"Please input Mobile Number\",\n        labelName: \"Mobile No.:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"number\",\n        max: 12\n      }, {\n        name: \"password\",\n        inputId: \"password\",\n        errorName: \"Please input password\",\n        labelName: \"Password:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"password\",\n        type: \"password\",\n        ifRequired: true\n      }, {\n        name: \"confirmPassword\",\n        inputId: \"confirmPassword\",\n        labelName: \"Confirm Password:\",\n        errorName: \"Password did not match\",\n        cardInputCol: \"col-md-6\",\n        type: \"password\",\n        ifRequired: true\n      }, {\n        name: \"email\",\n        errorName: \"Please input a valid email\",\n        inputId: \"email\",\n        labelName: \"Email:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"email\",\n        max: 200\n      }, {\n        name: \"userGroupHashId\",\n        inputId: \"userGroupHashId\",\n        inputType: \"hidden\",\n        type: \"hidden\"\n      }],\n      formUpdate: [{\n        name: \"name\",\n        inputId: \"name\",\n        labelName: \"Name:\",\n        cardInputCol: \"col-md-6\",\n        errorName: \"Please input Name\",\n        inputType: \"varchar\",\n        max: 120,\n        ifRequired: true\n      }, {\n        name: \"code\",\n        inputId: \"code\",\n        labelName: \"Code:\",\n        errorName: \"Please input Code\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"varchar\",\n        max: 50\n      }, {\n        name: \"userName\",\n        inputId: \"userName\",\n        errorName: \"Please input Username\",\n        labelName: \"Username:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"varchar\",\n        max: 120\n      }, {\n        name: \"mobileNo\",\n        inputId: \"mobileNo\",\n        errorName: \"Please input Mobile Number\",\n        labelName: \"Mobile No.:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"number\",\n        max: 12\n      }, {\n        name: \"email\",\n        inputId: \"email\",\n        errorName: \"Please input a valid email\",\n        labelName: \"Email:\",\n        cardInputCol: \"col-md-6\",\n        inputType: \"email\",\n        max: 200\n      }],\n      formSelect: [{\n        labelName: \"Branches:\",\n        name: \"homeBranchHashId\",\n        formSelectCol: \"col-md-6\",\n        inputType: \"select\",\n        callName: \"selectBranch\",\n        errorName: \"Please select Branch\",\n        options: JSON.parse(localStorage.getItem('listOfBranches')),\n        defaultPlaceholder: \"Branches\",\n        selectId: \"homeBranchHashId\",\n        className: \"select form-control\",\n        ifRequired: true\n      }],\n      uploadTextBox: [{\n        name: \"photoUrl\",\n        inputType: \"file\",\n        labelName: \"Upload Photo:\",\n        cardInputCol: \"col-12\",\n        acceptUpload: \"image/x-png,image/jpeg\"\n      }],\n      cardButton: [{\n        name: \"use\",\n        uiName: \"Create\",\n        callName: \"postData\",\n        className: \"btn btn-primary\"\n      }],\n      changePassBtn: [{\n        name: \"use\",\n        uiName: \"Save\",\n        callName: \"changePassword\",\n        className: \"btn btn-primary\"\n      }],\n      iconColor: [{\n        color: '#CBCBCB'\n      }],\n      indexedFilter: {\n        status: \"A\"\n      },\n      filterObjectValue: this.$store.state.userGroupHashId,\n      filterObject: {\n        value: \"userGroup\",\n        property: \"hashId\"\n      }\n    };\n  },\n  components: {\n    Navigation: Navigation,\n    Sidebar: Sidebar,\n    Loader: Loader,\n    TableList: TableList,\n    FormBuilder: FormBuilder\n  },\n  methods: {\n    stopSync: function stopSync() {\n      this.syncing = false;\n    },\n    closeModal: function closeModal() {\n      this.$store.state.showModal = false;\n      this.$store.state.showModalUpdate = false;\n      this.$store.state.showModalChangePass = false;\n      this.$store.state.loading = false;\n      this.showModalUpdate = false;\n    },\n    openModal: function openModal() {\n      this.$store.state.showModal = true;\n    },\n    openChangePassModal: function openChangePassModal(hashId) {\n      this.$store.state.selectedUserHash = hashId; //  localStorage.setItem('selectedUserHash', hashId)\n\n      this.$store.state.showModalChangePass = true;\n    },\n    getBranches: function getBranches() {\n      this.$store.dispatch('getBranches');\n    },\n    // async openModalUpdate (hashId){\n    //       this.showModalUpdate = true\n    //       let token = await localStorage.getItem(\"apiToken\");\n    //       let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //       localStorage.setItem('userHashUpdate', hashId)\n    //       let axiosConfig = {\n    //           headers: {\n    //               \"Authorization\": \"Bearer \"+ token\n    //           }\n    //       };\n    //       let res = await axios.get(apiDomain + 'users/' + hashId, axiosConfig)\n    //      .then((res) => {\n    //             document.getElementById(\"name\").value = res.data.name\n    //             document.getElementById(\"code\").value = res.data.code\n    //             document.getElementById(\"mobileNo\").value = res.data.mobileNo\n    //             document.getElementById(\"userName\").value= res.data.userName\n    //             document.getElementById(\"email\").value = res.data.email\n    //              if(res.data.photoUrl == \"\"){\n    //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\n    //             }\n    //             else if(res.data.photoUrl == null){\n    //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\n    //             }else{\n    //             document.getElementById(\"imgPreview\").src = res.data.photoUrl\n    //            }\n    //       })\n    //      .catch((err) => {\n    //         console.log(\"AXIOS ERROR: \", err);\n    //      })\n    // },\n    // async updateData(){\n    //           let hashId = await localStorage.getItem(\"userHashUpdate\");\n    //           let token = await localStorage.getItem(\"apiToken\");\n    //           let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //           let modelName = await localStorage.getItem(\"currentModelPage\")\n    //           let domain = await localStorage.getItem(\"domain\");\n    //           let photoUrl;\n    //           let formData = new FormData();\n    //           if(this.file != null && this.file != \"\"){\n    //                  formData.append('file', this.file, this.file.name);\n    //                  let response = await axios.post(apiDomain + 'uploads/' + modelName,\n    //                   formData,\n    //                   {\n    //                   headers: {\n    //                       'Content-Type': 'multipart/form-data',\n    //                         \"Authorization\": \"Bearer \"+ token\n    //                     }\n    //                   })\n    //                   .then((response) => {\n    //                         photoUrl = \"http://\" + domain + response.data[0].photoUrl\n    //                         console.log(photoUrl);\n    //                   })\n    //                   .catch((err) => {\n    //                       console.log(\"AXIOS ERROR: \", err);\n    //                 })\n    //           }else{\n    //              photoUrl =  this.photoUrl\n    //           }\n    //           let res = await axios({\n    //               method: 'put',\n    //               url: apiDomain + 'users/' + hashId ,\n    //               data: {\n    //                   name:  document.getElementById(\"name\").value,\n    //                   code:  document.getElementById(\"code\").value,\n    //                   mobileNo:  document.getElementById(\"mobileNo\").value,\n    //                   userName:  document.getElementById(\"userName\").value,\n    //                   email:  document.getElementById(\"email\").value,\n    //                   photoUrl:  photoUrl\n    //               },\n    //               headers: {\n    //                   Authorization: 'Bearer ' + token\n    //               }\n    //           })\n    //           .then((res) => {\n    //               this.showModalUpdate = false;\n    //               alert(\"Succesfully Updated!\");\n    //                location.reload();\n    //           })\n    //           .catch((err) => {\n    //               console.log(\"AXIOS ERROR: \", err);\n    //           })\n    // },\n    // async blockUser (hashId) {\n    //           let token = await localStorage.getItem(\"apiToken\");\n    //           let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //           let res = await axios({\n    //               method: 'put',\n    //               url: apiDomain + 'users/' + hashId + '/block',\n    //               data: {status: \"B\"},\n    //               headers: {\n    //                   Authorization: 'Bearer ' + token\n    //               }\n    //           })\n    //           .then((res) => {\n    //               alert(\"Succesfully Blocked!\");\n    //                location.reload();\n    //           })\n    //           .catch((err) => {\n    //               console.log(\"AXIOS ERROR: \", err);\n    //           })\n    //  },\n    linkToParent: function linkToParent() {\n      this.$router.push({\n        name: 'UserGroups'\n      });\n    },\n    // async changePassword () {\n    //           let token = await localStorage.getItem(\"apiToken\");\n    //           let userHash = await localStorage.getItem(\"selectedUserHash\");\n    //           let apiDomain = await localStorage.getItem(\"apiDomain\");\n    //           let res = await axios({\n    //               method: 'post',\n    //               url: apiDomain + 'users/' + userHash + '/changepass',\n    //              data: {\n    //                 newPassword: document.getElementById(\"newPassword\").value\n    //              },\n    //              headers: {\n    //                 Authorization: 'Bearer ' + token\n    //             }\n    //           })\n    //           .then((res) => {\n    //               alert(\"Succesfully Changed!\");\n    //               this.showModalChangePass = false;\n    //                location.reload();\n    //           })\n    //           .catch((err) => {\n    //               console.log(\"AXIOS ERROR: \", err);\n    //           })\n    //  },\n    selectedBranch: function () {\n      var _selectedBranch = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var e, item;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e = document.getElementById(\"homeBranchHashId\");\n                item = e.options[e.selectedIndex].value;\n                localStorage.setItem(\"homeBranchHashId\", item);\n\n                if (document.getElementById('homeBranchHashId').value !== \"\") {\n                  document.getElementById(\"homeBranchHashId\").classList.remove('is-invalid');\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function selectedBranch() {\n        return _selectedBranch.apply(this, arguments);\n      }\n\n      return selectedBranch;\n    }()\n  },\n  watch: {},\n  computed: {}\n};",{"version":3,"sources":["Users.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <Navigation/>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n            \r\n                 <FormBuilder\r\n                    api-model=\"users\"\r\n                    card-title=\"Create New User\"\r\n                    :card-button=\"cardButton\"\r\n                    success-message=\"User Succesfully Added!\"\r\n                    v-if=\"this.$store.state.showModal\"  \r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :card-input=\"form\"\r\n                    :form-select=\"formSelect\"\r\n                    @selectBranch=\"selectedBranch\"\r\n                    :btn-close=\"btnClose\"\r\n                    @closeModal=\"closeModal\"\r\n                    :card-upload=\"uploadTextBox\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n                 <FormBuilder\r\n                    api-model=\"users\"\r\n                    card-title=\"Change Password\"\r\n                    :card-button=\"changePassBtn\"\r\n                    :card-input=\"formChangePass\"\r\n                    success-message=\"Password Succesfully Updated!\"\r\n                    v-if=\"this.$store.state.showModalChangePass\"  \r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :btn-close=\"btnClose\"\r\n                    @closeModal=\"closeModal\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n                 <FormBuilder\r\n                    api-model=\"users\" \r\n                    card-title=\"Update User\"\r\n                    :card-button=\"cardButtonUpdate\"\r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :card-input=\"formUpdate\"\r\n                    v-if=\"this.$store.state.showModalUpdate\"  \r\n                    @closeModal=\"closeModal\"\r\n                    :btn-close=\"btnClose\"\r\n                    :card-upload=\"uploadTextBox\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n\r\n                  <div class=\"col-12\">\r\n                        <template v-if=\"syncing == true\">\r\n                            <Loader api-model=\"users\" @doneLoading=\"stopSync\" :indexed-filter=\"indexedFilter\" />\r\n                        </template>\r\n                        <template v-else>\r\n                        <TableList \r\n                            api-model=\"users\" \r\n                            :card-upload=\"uploadTextBox\"\r\n                            :card-input=\"formUpdate\"\r\n                            :table-name=\"tableName\"\r\n                            :show-fields=\"showFields\" \r\n                            :indexed-filter=\"indexedFilter\" \r\n                            :filter-object=\"filterObject\"\r\n                            :filter-value=\"filterObjectValue\" \r\n                            :icon-buttons=\"iconButtons\"\r\n                            :icon-color=\"iconColor\"\r\n                            :btn-add=\"btnAdd\"\r\n                            @openChangePassModal=\"openChangePassModal\"\r\n                            :btn-back=\"btnBack\"\r\n                            @btnBack=\"linkToParent\"\r\n                            @btnAddModal=\"openModal\"\r\n                        />\r\n                        </template>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport Navigation from '@/components/Navigation.vue'\r\nimport Sidebar from '@/components/Sidebar.vue'\r\nimport Loader from '@/components/Loader.vue'\r\nimport TableList from '@/components/TableList.vue'\r\nimport FormBuilder from '@/components/FormBuilder.vue'\r\nimport axios from 'axios';\r\nexport default {\r\n  name: 'Users',\r\n  mounted () {\r\n     let tableName = this.$store.state.userGroupName;\r\n     this.$store.dispatch('getBranches');\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n            showModal: false,\r\n            showModalChangePass: false,\r\n            showModalUpdate: false,\r\n            syncing: true,\r\n            photoUrl: '',\r\n            file: '',\r\n            tableName: this.$store.state.userGroupName,\r\n            showFields: {\r\n                \"orderBy\": \"email\",\r\n                \"orientation\": \"asc\",\r\n                \"list\": ['name','code','mobileNo','email'],\r\n            },\r\n             iconButtons: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"fas fa-pen\",\r\n                  callName: \"retrieveData\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"deleteUser\",\r\n                  uiName: \"fas fa-times\",\r\n                  callName: \"delete\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"blockData\",\r\n                  uiName: \"fas fa-ban\",\r\n                  callName: \"block\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"block\",\r\n                  uiName: \"fas fa-user-edit\",\r\n                  callName: \"openChangePassModal\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n              ],\r\n              btnAdd:[{\r\n                name:\"btnAdd\",\r\n                callName: \"btnAddModal\"\r\n              }],\r\n              btnBack: [\r\n                {\r\n                  tableName: \"Roles\",\r\n                  callName: \"btnBack\"\r\n                }\r\n              ],\r\n              btnClose: [\r\n                {\r\n                  name: \"btnClose\",\r\n                  uiName: \"Cancel\",\r\n                  callName: \"closeModal\",\r\n                }\r\n              ],\r\n             cardButtonUpdate: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"putData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              formChangePass: [\r\n                {\r\n                  name: \"password\",\r\n                  inputId: \"password\",\r\n                  labelName: \"New Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input New Password\",\r\n                  type: \"password\",\r\n                  inputType: \"password\",\r\n                  ifRequired: true,\r\n                  max: 200\r\n                },\r\n                {\r\n                  name: \"confirmPassword\",\r\n                  inputId: \"confirmPassword\",\r\n                  labelName: \"Confirm Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Password did not match..\",\r\n                  type: \"password\",\r\n                  inputType: \"password\",\r\n                  ifRequired: true,\r\n                  max: 200\r\n                }\r\n              ],\r\n              form: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  inputType: \"varchar\",\r\n                  max: 120,\r\n                  ifRequired: true\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  errorName: \"Please input Code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 50\r\n                },\r\n                {\r\n                  name: \"userName\",\r\n                  inputId: \"userName\",\r\n                  errorName: \"Please input Username\",\r\n                  labelName: \"Username:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 120  \r\n                },\r\n                {\r\n                  name: \"mobileNo\",\r\n                  inputId: \"mobileNo\",\r\n                  errorName: \"Please input Mobile Number\",\r\n                  labelName: \"Mobile No.:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"number\",\r\n                  max: 12  \r\n                },\r\n                {\r\n                  name: \"password\",\r\n                  inputId: \"password\",\r\n                  errorName: \"Please input password\",\r\n                  labelName: \"Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"password\",\r\n                  type: \"password\",\r\n                  ifRequired: true\r\n                },\r\n                 {\r\n                  name: \"confirmPassword\",\r\n                  inputId: \"confirmPassword\",\r\n                  labelName: \"Confirm Password:\",\r\n                  errorName: \"Password did not match\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  type: \"password\",\r\n                  ifRequired: true\r\n                },\r\n                 {\r\n                  name: \"email\",\r\n                  errorName: \"Please input a valid email\",\r\n                  inputId: \"email\",\r\n                  labelName: \"Email:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"email\",\r\n                  max: 200\r\n                },\r\n                {\r\n                  name: \"userGroupHashId\",\r\n                  inputId: \"userGroupHashId\",\r\n                  inputType: \"hidden\",\r\n                  type: \"hidden\"\r\n                }\r\n              ],\r\n              formUpdate: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  inputType: \"varchar\",\r\n                  max: 120,\r\n                  ifRequired: true\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  errorName: \"Please input Code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 50\r\n                },\r\n                {\r\n                  name: \"userName\",\r\n                  inputId: \"userName\",\r\n                  errorName: \"Please input Username\",\r\n                  labelName: \"Username:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 120  \r\n                },\r\n                 {\r\n                  name: \"mobileNo\",\r\n                  inputId: \"mobileNo\",\r\n                  errorName: \"Please input Mobile Number\",\r\n                  labelName: \"Mobile No.:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"number\",\r\n                  max: 12  \r\n                },\r\n                 {\r\n                  name: \"email\",\r\n                  inputId: \"email\",\r\n                  errorName: \"Please input a valid email\",\r\n                  labelName: \"Email:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"email\",\r\n                  max: 200\r\n                },\r\n              ],\r\n               formSelect: [{\r\n                  labelName: \"Branches:\",\r\n                  name: \"homeBranchHashId\",\r\n                  formSelectCol: \"col-md-6\",\r\n                  inputType: \"select\",\r\n                  callName: \"selectBranch\",\r\n                  errorName: \"Please select Branch\",\r\n                  options: JSON.parse(localStorage.getItem('listOfBranches')),\r\n                  defaultPlaceholder: \"Branches\",\r\n                  selectId: \"homeBranchHashId\",\r\n                  className: \"select form-control\",\r\n                  ifRequired: true\r\n                }],\r\n               uploadTextBox: [{\r\n                  name: \"photoUrl\",\r\n                  inputType: \"file\",\r\n                  labelName: \"Upload Photo:\",\r\n                  cardInputCol: \"col-12\",\r\n                  acceptUpload: \"image/x-png,image/jpeg\"\r\n              }],\r\n               cardButton: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Create\",\r\n                  callName: \"postData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n             changePassBtn: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"changePassword\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              iconColor: [\r\n                 {\r\n                     color: '#CBCBCB'\r\n                 }\r\n              ],\r\n              indexedFilter: {\r\n                status : \"A\"\r\n              },\r\n              filterObjectValue: this.$store.state.userGroupHashId,\r\n              filterObject: {\r\n                value: \"userGroup\",\r\n                property: \"hashId\"\r\n              },\r\n            \r\n        }\r\n    },\r\n  components: {\r\n      Navigation,\r\n      Sidebar,\r\n      Loader,\r\n      TableList,\r\n      FormBuilder\r\n  },\r\n  methods: {\r\n      stopSync: function () {\r\n          this.syncing = false\r\n      },\r\n      closeModal: function(){\r\n        this.$store.state.showModal = false\r\n        this.$store.state.showModalUpdate = false\r\n        this.$store.state.showModalChangePass = false\r\n        this.$store.state.loading = false\r\n        this.showModalUpdate = false\r\n      },\r\n      openModal: function (){\r\n        this.$store.state.showModal = true\r\n      },\r\n      openChangePassModal: function(hashId){\r\n        this.$store.state.selectedUserHash = hashId\r\n   \r\n      //  localStorage.setItem('selectedUserHash', hashId)\r\n        this.$store.state.showModalChangePass = true\r\n      },\r\n      getBranches () {\r\n          this.$store.dispatch('getBranches')\r\n      },\r\n      // async openModalUpdate (hashId){\r\n      //       this.showModalUpdate = true\r\n\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       localStorage.setItem('userHashUpdate', hashId)\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //       };\r\n      //       let res = await axios.get(apiDomain + 'users/' + hashId, axiosConfig)\r\n      //      .then((res) => {\r\n      //             document.getElementById(\"name\").value = res.data.name\r\n      //             document.getElementById(\"code\").value = res.data.code\r\n      //             document.getElementById(\"mobileNo\").value = res.data.mobileNo\r\n      //             document.getElementById(\"userName\").value= res.data.userName\r\n      //             document.getElementById(\"email\").value = res.data.email\r\n      //              if(res.data.photoUrl == \"\"){\r\n      //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\r\n      //             }\r\n      //             else if(res.data.photoUrl == null){\r\n      //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\r\n      //             }else{\r\n      //             document.getElementById(\"imgPreview\").src = res.data.photoUrl\r\n      //            }\r\n      //       })\r\n      //      .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      // },\r\n      // async updateData(){\r\n      //           let hashId = await localStorage.getItem(\"userHashUpdate\");\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //           let domain = await localStorage.getItem(\"domain\");\r\n      //           let photoUrl;\r\n      //           let formData = new FormData();\r\n      //           if(this.file != null && this.file != \"\"){\r\n      //                  formData.append('file', this.file, this.file.name);\r\n                      \r\n      //                  let response = await axios.post(apiDomain + 'uploads/' + modelName,\r\n      //                   formData,\r\n      //                   {\r\n      //                   headers: {\r\n      //                       'Content-Type': 'multipart/form-data',\r\n      //                         \"Authorization\": \"Bearer \"+ token\r\n      //                     }\r\n      //                   })\r\n      //                   .then((response) => {\r\n      //                         photoUrl = \"http://\" + domain + response.data[0].photoUrl\r\n      //                         console.log(photoUrl);\r\n      //                   })\r\n      //                   .catch((err) => {\r\n      //                       console.log(\"AXIOS ERROR: \", err);\r\n      //                 })\r\n      //           }else{\r\n      //              photoUrl =  this.photoUrl\r\n      //           }\r\n                 \r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'users/' + hashId ,\r\n      //               data: {\r\n                      \r\n      //                   name:  document.getElementById(\"name\").value,\r\n      //                   code:  document.getElementById(\"code\").value,\r\n      //                   mobileNo:  document.getElementById(\"mobileNo\").value,\r\n      //                   userName:  document.getElementById(\"userName\").value,\r\n      //                   email:  document.getElementById(\"email\").value,\r\n      //                   photoUrl:  photoUrl\r\n      //               },\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               this.showModalUpdate = false;\r\n      //               alert(\"Succesfully Updated!\");\r\n      //                location.reload();\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      // },\r\n      // async blockUser (hashId) {\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'users/' + hashId + '/block',\r\n      //               data: {status: \"B\"},\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Blocked!\");\r\n      //                location.reload();\r\n\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  },\r\n       linkToParent: function(){\r\n          this.$router.push({ name: 'UserGroups' })\r\n       },\r\n   \r\n      // async changePassword () {\r\n\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let userHash = await localStorage.getItem(\"selectedUserHash\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'post',\r\n      //               url: apiDomain + 'users/' + userHash + '/changepass',\r\n      //              data: {\r\n\t    //                 newPassword: document.getElementById(\"newPassword\").value\r\n      //              },\r\n      //              headers: {\r\n      //                 Authorization: 'Bearer ' + token\r\n      //             }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Changed!\");\r\n      //               this.showModalChangePass = false;\r\n      //                location.reload();\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  },\r\n       async selectedBranch () {\r\n              var e = document.getElementById(\"homeBranchHashId\");\r\n              var item = e.options[e.selectedIndex].value;\r\n              localStorage.setItem(\"homeBranchHashId\",item)\r\n\r\n              if ( document.getElementById('homeBranchHashId').value !== \"\"){\r\n                 document.getElementById(\"homeBranchHashId\").classList.remove('is-invalid');\r\n             }\r\n       },\r\n      //  validation: function(e){\r\n\r\n      //     let password =  document.getElementById(\"password\").value;\r\n      //     let confirmPassword =  document.getElementById(\"confirmPassword\").value;\r\n      //     let email =  document.getElementById(\"email\").value;\r\n      //     let re = /[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}/igm;\r\n\r\n      //     const form = document.querySelector('form');\r\n      //     var txt = \"\";\r\n      //     for (var i = 0; i < form.length; i++) {\r\n      //         if(form.elements[i].value ==\"\"){\r\n      //             form.elements[i].classList.add('is-invalid')\r\n      //         }\r\n      //     }\r\n\r\n      //     if(password == \"\" && confirmPassword == \"\"){\r\n      //           document.getElementById(\"password\").classList.add('is-invalid');\r\n      //            document.getElementById(\"confirmPassword\").classList.add('is-invalid');\r\n      //     }else{\r\n      //           document.getElementById(\"password\").classList.remove('is-invalid');\r\n      //           document.getElementById(\"confirmPassword\").classList.remove('is-invalid');\r\n\r\n      //           if(document.getElementById(\"password\").value!=document.getElementById(\"confirmPassword\").value){\r\n      //                   document.getElementById(\"confirmPassword\").classList.add('is-invalid');\r\n      //           }else{\r\n      //                   document.getElementById(\"confirmPassword\").classList.remove('is-invalid');\r\n      //           }\r\n      //     }\r\n\r\n      //     if (email == '' || !re.test(email))\r\n      //     {\r\n      //         document.getElementById(\"email\").classList.add('is-invalid');\r\n      //         return false;\r\n      //     }\r\n       \r\n      //     this.saveNewData();\r\n\r\n      //  },\r\n      //   async saveNewData (){\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //       let domain = await localStorage.getItem(\"domain\");\r\n      //       let formData = new FormData();\r\n      //       let photoUrl;\r\n      //       if(this.file != null && this.file != \"\"){\r\n      //               formData.append('file', this.file, this.file.name);\r\n                  \r\n      //               let response = await axios.post(apiDomain + 'uploads/' + modelName,\r\n      //               formData,\r\n      //               {\r\n      //               headers: {\r\n      //                   'Content-Type': 'multipart/form-data',\r\n      //                     \"Authorization\": \"Bearer \"+ token\r\n      //                 }\r\n      //               })\r\n      //               .then((response) => {\r\n      //                     photoUrl = \"http://\" + domain + response.data[0].photoUrl\r\n      //               })\r\n      //               .catch((err) => {\r\n      //                   console.log(\"AXIOS ERROR: \", err);\r\n      //             })\r\n\r\n      //       }else{\r\n      //           photoUrl = this.photoUrl\r\n      //       }\r\n\r\n      //       let  postData = {\r\n      //             name:  document.getElementById(\"name\").value,\r\n      //             code:  document.getElementById(\"code\").value,\r\n      //             mobileNo:  document.getElementById(\"mobileNo\").value,\r\n      //             userName:  document.getElementById(\"userName\").value,\r\n      //             email:  document.getElementById(\"email\").value,\r\n      //             password:  document.getElementById(\"password\").value,\r\n      //             homeBranchHashId: localStorage.getItem(\"homeBranchHashId\"),\r\n      //             userGroupHashId: localStorage.getItem(\"userGroupHashId\"),\r\n      //             photoUrl: photoUrl\r\n      //       }\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //         };\r\n\r\n      //       let res = await axios.post(apiDomain + 'users', postData, axiosConfig)\r\n      //         .then((res) => {\r\n      //            console.log(\"RESPONSE RECEIVED: \", res);\r\n      //            document.getElementById(\"name\").value = \"\";\r\n      //            document.getElementById(\"code\").value = \"\";\r\n      //            document.getElementById(\"mobileNo\").value = \"\";\r\n      //            document.getElementById(\"userName\").value = \"\";\r\n      //            document.getElementById(\"email\").value = \"\";\r\n      //            document.getElementById(\"password\").value = \"\";\r\n      //            alert(\"Succesfully Added!\");\r\n      //            this.showModal = false;\r\n      //             location.reload();\r\n      //       })\r\n      //         .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      \r\n         \r\n      // }\r\n  },\r\n  watch:{\r\n  },\r\n  computed: {\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n#listOfBranches {\r\n   border-color: #7808F7;\r\n   height: 41px;\r\n}\r\n.is-invalid {\r\n   border-color:red !important;\r\n   height: 41px;\r\n}\r\n.card-subtitle{\r\n    text-align: left;\r\n    font-size:14px;\r\n    margin-top: -25px;\r\n    margin-bottom: 30px;\r\n    letter-spacing: 0;\r\n    color:red !important;\r\n}\r\n.no-gutters{\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n}\r\n\r\n</style>"],"sourceRoot":"src/views"}]}