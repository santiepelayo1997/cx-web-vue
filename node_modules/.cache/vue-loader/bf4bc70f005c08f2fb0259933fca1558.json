{"remainingRequest":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\components\\TableView.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\components\\TableView.vue","mtime":1579058170747},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n    name: 'TableView',\r\n    mounted() {\r\n        this.applyDefaultFilters()\r\n        this.loadDefaults()\r\n        this.loadOnlyPage(this.page)\r\n        this.currentAccountName()\r\n        if(this.$store.state.ifDeleted == true){\r\n               setTimeout(() => {\r\n               this.$store.state.ifDeleted = false\r\n              },1000)\r\n        }\r\n    },\r\n     data: function() {\r\n        return {\r\n            search: \"\",\r\n            objectCount: 0,\r\n            objectLastUpdate: null,\r\n            showingCount: 0, //50 per page\r\n            page: 1,\r\n            callName: null,\r\n            totalpages: 0,\r\n            objectList: [],\r\n            objectChecking: [],\r\n            perPage: 10,\r\n            appliedFilters: null,\r\n            accountName: null,\r\n            isAdmin:false\r\n        }\r\n    },\r\n    props: {\r\n        tableName: String,\r\n        btnAdd: Array,\r\n        apiModel: String,\r\n        filters: Object,\r\n        showFields: Object,\r\n        indexedFilter: Object,\r\n        filterValue: String,\r\n        filterObject: Object,\r\n    },\r\n    methods: {\r\n        appliedFiltersFunction: function(value) {\r\n            //equals\r\n            let retain = false\r\n            for(var i = 0; i < Object.keys(this.appliedFilters).length; i++){\r\n                if(this.appliedFilters[Object.keys(this.appliedFilters)[i]] == value[Object.keys(this.appliedFilters)[i]])\r\n                    retain = true\r\n            }\r\n            return retain\r\n        },\r\n        applyDefaultFilters: function(){\r\n            if(localStorage.getItem('currentAccount') != null && localStorage.getItem('currentAccount') != undefined && this.apiModel != \"accounts\"){\r\n                this.appliedFilters = {\"accountHashId\": localStorage.getItem('currentAccount'), ...this.indexedFilter}\r\n            }\r\n        },\r\n        emitActionToParent: function(action, hashId, name){\r\n            this.$emit(action, hashId, name)\r\n         },\r\n        countItems: async function(){\r\n            let items\r\n            if(this.indexedFilter != undefined && this.indexedFilter != null){\r\n                items = await this.$store.state.db[this.apiModel].where(this.indexedFilter)\r\n            }else{\r\n                items = await this.$store.state.db[this.apiModel]\r\n            }\r\n\r\n            if(this.appliedFilters != null && this.appliedFilters != undefined)\r\n            items = await items.filter(this.appliedFiltersFunction)\r\n \r\n            if(this.filterObject != undefined && this.filterObject != null) {\r\n                let arrayvalues = await items.toArray();\r\n                let filterValue = this.filterValue\r\n                let filterItems = [];\r\n               \r\n                arrayvalues.forEach(function(element) {\r\n                    filterItems.push(element)\r\n                });\r\n                let filterObjectKey = this.filterObject\r\n                items = await filterItems.filter(function (arrayItems) {\r\n                    return arrayItems[filterObjectKey.value][filterObjectKey.property] === filterValue\r\n                });\r\n                  this.objectCount = await items.length;\r\n                }else{\r\n                  this.objectCount = await items.count();\r\n            }\r\n        },\r\n        loadDefaults: async function(){\r\n            //we need this to load async values\r\n            this.countItems()\r\n            this.objectLastUpdate = await this.$store.getters.lastUpdatedAtUtc(this.apiModel)\r\n        },\r\n        currentAccountName: async function(){\r\n            let acc = await this.$store.getters.currentAccount()\r\n            this.accountName = acc.name    \r\n        },\r\n        loadPage: async function(pageNo){\r\n            let items\r\n        \r\n            if(this.indexedFilter != undefined && this.indexedFilter != null){\r\n                //sorting will not work on indexed filter\r\n                items = await this.$store.state.db[this.apiModel].where(this.indexedFilter)\r\n              \r\n            }else{\r\n                items = await this.$store.state.db[this.apiModel].orderBy(this.showFields.orderBy)\r\n                \r\n                if(this.desc)\r\n                    items = await items.reverse()\r\n            }\r\n            if(this.desc)\r\n                    items = await items.reverse()\r\n            items = await items.offset(((pageNo-1)*this.perPage)).limit(this.perPage)\r\n\r\n            if(this.appliedFilters != null && this.appliedFilters != undefined)\r\n                items = await items.filter(this.appliedFiltersFunction)\r\n\r\n            items = await items.toArray()//convert to array\r\n          //  console.log(items);\r\n      \r\n           if(this.filterObject != undefined && this.filterObject != null) {\r\n                \r\n                let filterValue = this.filterValue\r\n                let filterItems = [];\r\n           \r\n                items.forEach(function(element) {\r\n                    filterItems.push(element)\r\n                });\r\n                let filterObjectKey = this.filterObject\r\n                items = await filterItems.filter(function (arrayItems) {\r\n                    return arrayItems[filterObjectKey.value][filterObjectKey.property] === filterValue\r\n                });\r\n           }\r\n          \r\n            return await items\r\n        },\r\n        loadNextPage: async function(){\r\n            this.page++;\r\n            let pageContent = await this.loadPage(this.page)\r\n            this.objectList = this.objectList.concat(pageContent)\r\n        },\r\n        loadOnlyPage: async function(pageNo){\r\n            this.objectList = await this.loadPage(pageNo)\r\n        },\r\n        humanReadable(text){\r\n            return text.replace(/([A-Z])/g, ' $1').replace(/^./, function(str){ return str.toUpperCase();})\r\n        }\r\n    },\r\n    computed: {\r\n        filterTable: function(){\r\n            return this.objectList.filter((filter)=>{\r\n                return filter.name.toLowerCase().includes(this.search.toLowerCase());\r\n            });\r\n        },\r\n        hasName(){\r\n            try{\r\n                return this.showFields.list.includes('name')\r\n            }catch(e){\r\n                return false\r\n            }\r\n        },\r\n        hasCode(){\r\n            try{\r\n                return this.showFields.list.includes('code')\r\n            }catch(e){\r\n                return false\r\n            }\r\n        },\r\n        desc(){\r\n            return this.showFields.orientation == \"desc\"\r\n        },\r\n        loadeditemsCount(){\r\n            return this.objectList.length\r\n        },\r\n        headerField(){\r\n            return this.showFields.tableHeader.filter(function(header){\r\n                return header \r\n            })\r\n        },\r\n        fieldListLess(){\r\n            return this.showFields.tableData.filter(function(field){\r\n                return field \r\n            })\r\n        },\r\n        currentAccountSelected(){\r\n            return (localStorage.getItem('isAdmin') && localStorage.getItem('currentAccount') != null && localStorage.getItem('currentAccount') != undefined)\r\n        }\r\n    }\r\n}\r\n",{"version":3,"sources":["TableView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"TableView.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n<div>   \r\n<div class=\"row section-header\">    \r\n    <div class=\"col-sm-8 \">\r\n        <h2 class=\"ml-3 float-left section-title\">\r\n                {{this.tableName}}\r\n                <span v-for=\"ba in btnAdd\" v-bind:key=\"ba.name\" >\r\n                <span id=\"btnAdd\" @click=\"emitActionToParent(ba.callName)\"><i class=\"add fas fa-plus-circle justify-content-center\" ></i> </span>\r\n            </span>\r\n        </h2>\r\n        <br>\r\n    </div>\r\n    <div class=\"col-lg-4\">\r\n        <div class=\"d-flex justify-content-end\">\r\n            <div class=\"load-status pt-3 pr-2\">\r\n                    Showing {{loadeditemsCount}} of {{objectCount}} \r\n            </div>\r\n                <div v-if=\"this.isAdmin == 'true'\">\r\n                    <button class=\"btn btn-success dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <span v-if=\"currentAccountSelected\">Account: {{accountName}}</span>\r\n                    </button>\r\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                        <button class=\"dropdown-item\" type=\"button\">Action</button>\r\n                        <button class=\"dropdown-item\" type=\"button\">Another action</button>\r\n                        <button class=\"dropdown-item\" type=\"button\">Something else here</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n        <p v-if=\"objectLastUpdate != null\" class=\"section-status pl-4 ml-5\">UPDATED AS OF: {{objectLastUpdate | moment(\"MM/DD/YYYY LTS\")}}</p>\r\n</div>\r\n\r\n<div class=\"lazyload\">\r\n<div class=\"card row-table \">\r\n  <div class=\"card-body\">\r\n   <div class=\"form-group has-search\">\r\n            <span><i  id=\"filterIcon\" class=\"fas fa-filter form-control-feedback mt-2 ml-2\"></i></span>\r\n            <input type=\"text\" class=\"form-control\" v-model=\"search\" id=\"inputSearch\" placeholder=\"Filter\">\r\n   </div>\r\n   <table class=\"table\">\r\n    <thead class=\"thead\">\r\n        <tr>\r\n            <th scope=\"col\" v-for=\"header in headerField\" v-bind:key=\"header\">\r\n                {{header}} \r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr v-for=\"item in filterTable\" v-bind:key=\"item.hashId\">\r\n            <td v-for=\"field in fieldListLess\" v-bind:key=\"field\">\r\n                {{item[field]}} \r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n    </table>\r\n\r\n   <div class=\"col-md-12 text-center\">\r\n          <button v-if=\"loadeditemsCount < objectCount\" class=\"btnLoadMore btn btn-primary\" @click=\"loadNextPage()\">Show more</button>\r\n   </div>\r\n  </div>\r\n</div>\r\n</div>\r\n</div>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: 'TableView',\r\n    mounted() {\r\n        this.applyDefaultFilters()\r\n        this.loadDefaults()\r\n        this.loadOnlyPage(this.page)\r\n        this.currentAccountName()\r\n        if(this.$store.state.ifDeleted == true){\r\n               setTimeout(() => {\r\n               this.$store.state.ifDeleted = false\r\n              },1000)\r\n        }\r\n    },\r\n     data: function() {\r\n        return {\r\n            search: \"\",\r\n            objectCount: 0,\r\n            objectLastUpdate: null,\r\n            showingCount: 0, //50 per page\r\n            page: 1,\r\n            callName: null,\r\n            totalpages: 0,\r\n            objectList: [],\r\n            objectChecking: [],\r\n            perPage: 10,\r\n            appliedFilters: null,\r\n            accountName: null,\r\n            isAdmin:false\r\n        }\r\n    },\r\n    props: {\r\n        tableName: String,\r\n        btnAdd: Array,\r\n        apiModel: String,\r\n        filters: Object,\r\n        showFields: Object,\r\n        indexedFilter: Object,\r\n        filterValue: String,\r\n        filterObject: Object,\r\n    },\r\n    methods: {\r\n        appliedFiltersFunction: function(value) {\r\n            //equals\r\n            let retain = false\r\n            for(var i = 0; i < Object.keys(this.appliedFilters).length; i++){\r\n                if(this.appliedFilters[Object.keys(this.appliedFilters)[i]] == value[Object.keys(this.appliedFilters)[i]])\r\n                    retain = true\r\n            }\r\n            return retain\r\n        },\r\n        applyDefaultFilters: function(){\r\n            if(localStorage.getItem('currentAccount') != null && localStorage.getItem('currentAccount') != undefined && this.apiModel != \"accounts\"){\r\n                this.appliedFilters = {\"accountHashId\": localStorage.getItem('currentAccount'), ...this.indexedFilter}\r\n            }\r\n        },\r\n        emitActionToParent: function(action, hashId, name){\r\n            this.$emit(action, hashId, name)\r\n         },\r\n        countItems: async function(){\r\n            let items\r\n            if(this.indexedFilter != undefined && this.indexedFilter != null){\r\n                items = await this.$store.state.db[this.apiModel].where(this.indexedFilter)\r\n            }else{\r\n                items = await this.$store.state.db[this.apiModel]\r\n            }\r\n\r\n            if(this.appliedFilters != null && this.appliedFilters != undefined)\r\n            items = await items.filter(this.appliedFiltersFunction)\r\n \r\n            if(this.filterObject != undefined && this.filterObject != null) {\r\n                let arrayvalues = await items.toArray();\r\n                let filterValue = this.filterValue\r\n                let filterItems = [];\r\n               \r\n                arrayvalues.forEach(function(element) {\r\n                    filterItems.push(element)\r\n                });\r\n                let filterObjectKey = this.filterObject\r\n                items = await filterItems.filter(function (arrayItems) {\r\n                    return arrayItems[filterObjectKey.value][filterObjectKey.property] === filterValue\r\n                });\r\n                  this.objectCount = await items.length;\r\n                }else{\r\n                  this.objectCount = await items.count();\r\n            }\r\n        },\r\n        loadDefaults: async function(){\r\n            //we need this to load async values\r\n            this.countItems()\r\n            this.objectLastUpdate = await this.$store.getters.lastUpdatedAtUtc(this.apiModel)\r\n        },\r\n        currentAccountName: async function(){\r\n            let acc = await this.$store.getters.currentAccount()\r\n            this.accountName = acc.name    \r\n        },\r\n        loadPage: async function(pageNo){\r\n            let items\r\n        \r\n            if(this.indexedFilter != undefined && this.indexedFilter != null){\r\n                //sorting will not work on indexed filter\r\n                items = await this.$store.state.db[this.apiModel].where(this.indexedFilter)\r\n              \r\n            }else{\r\n                items = await this.$store.state.db[this.apiModel].orderBy(this.showFields.orderBy)\r\n                \r\n                if(this.desc)\r\n                    items = await items.reverse()\r\n            }\r\n            if(this.desc)\r\n                    items = await items.reverse()\r\n            items = await items.offset(((pageNo-1)*this.perPage)).limit(this.perPage)\r\n\r\n            if(this.appliedFilters != null && this.appliedFilters != undefined)\r\n                items = await items.filter(this.appliedFiltersFunction)\r\n\r\n            items = await items.toArray()//convert to array\r\n          //  console.log(items);\r\n      \r\n           if(this.filterObject != undefined && this.filterObject != null) {\r\n                \r\n                let filterValue = this.filterValue\r\n                let filterItems = [];\r\n           \r\n                items.forEach(function(element) {\r\n                    filterItems.push(element)\r\n                });\r\n                let filterObjectKey = this.filterObject\r\n                items = await filterItems.filter(function (arrayItems) {\r\n                    return arrayItems[filterObjectKey.value][filterObjectKey.property] === filterValue\r\n                });\r\n           }\r\n          \r\n            return await items\r\n        },\r\n        loadNextPage: async function(){\r\n            this.page++;\r\n            let pageContent = await this.loadPage(this.page)\r\n            this.objectList = this.objectList.concat(pageContent)\r\n        },\r\n        loadOnlyPage: async function(pageNo){\r\n            this.objectList = await this.loadPage(pageNo)\r\n        },\r\n        humanReadable(text){\r\n            return text.replace(/([A-Z])/g, ' $1').replace(/^./, function(str){ return str.toUpperCase();})\r\n        }\r\n    },\r\n    computed: {\r\n        filterTable: function(){\r\n            return this.objectList.filter((filter)=>{\r\n                return filter.name.toLowerCase().includes(this.search.toLowerCase());\r\n            });\r\n        },\r\n        hasName(){\r\n            try{\r\n                return this.showFields.list.includes('name')\r\n            }catch(e){\r\n                return false\r\n            }\r\n        },\r\n        hasCode(){\r\n            try{\r\n                return this.showFields.list.includes('code')\r\n            }catch(e){\r\n                return false\r\n            }\r\n        },\r\n        desc(){\r\n            return this.showFields.orientation == \"desc\"\r\n        },\r\n        loadeditemsCount(){\r\n            return this.objectList.length\r\n        },\r\n        headerField(){\r\n            return this.showFields.tableHeader.filter(function(header){\r\n                return header \r\n            })\r\n        },\r\n        fieldListLess(){\r\n            return this.showFields.tableData.filter(function(field){\r\n                return field \r\n            })\r\n        },\r\n        currentAccountSelected(){\r\n            return (localStorage.getItem('isAdmin') && localStorage.getItem('currentAccount') != null && localStorage.getItem('currentAccount') != undefined)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n/* width */\r\n::-webkit-scrollbar {\r\n   width: 14px;\r\n   background-color:#D0D0D04B;\r\n\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n  border-radius: 20px;\r\n\r\n}\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n  background:#D3D3DD; \r\n  border-radius: 20px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #D3D3DD; \r\n}\r\n.lazyload{\r\n    overflow-y: auto;\r\n    max-height: 65.7407vh;\r\n}\r\n.lazyload:hover{\r\n    max-height:65.7407vh;\r\n    overflow-y: auto;\r\n}\r\n.btnLoadMore {\r\n    border-radius: 10px;\r\n}\r\n.section-status{\r\n    font-size: 12px;\r\n    color: #D0D0D0;\r\n    margin-top:-8px;\r\n    text-align: right\r\n}  \r\n.section-header{\r\n    min-height: 50px;\r\n    padding-left:42px;\r\n    padding-right:42px;\r\n}\r\n.row-table{\r\n    min-height: 50px;\r\n    overflow-y: auto;\r\n    margin-left:42px;\r\n    margin-right:42px;\r\n}\r\n.thead{\r\n    background-color:#F0F0F7 !important;\r\n}\r\n.table thead th {\r\n    vertical-align: bottom;\r\n    border-bottom: 2px solid #F0F0F7 !important;\r\n}\r\n.table th, .table td {\r\n    padding: .75rem;\r\n    vertical-align: top;\r\n    color:#707070;\r\n    border-top: 1px solid #F0F0F7 !important;\r\n}\r\n.has-search .form-control {\r\n    padding-left: 2.375rem;\r\n}\r\n\r\n.has-search .form-control-feedback {\r\n    position: absolute;\r\n    display: block;\r\n    width: 2.375rem;\r\n    height: 2.375rem;\r\n    line-height: 2.375rem;\r\n    text-align: center;\r\n    pointer-events: none;\r\n    color: #aaa;\r\n}\r\n#filterIcon{\r\n    color:#7808F7;\r\n    width:18px;\r\n    height:18px;\r\n}\r\n#inputSearch{\r\n    background: #FCFCFC 0% 0% no-repeat padding-box;\r\n    border: 2px solid #7808F7;\r\n    border-radius: 10px;\r\n    opacity: 1;\r\n    width: 210px;\r\n    height: 35px;\r\n    margin-top:21px;\r\n}\r\n.section-title{\r\n    font-family: \"Work Sans\";\r\n    font-weight: 550;\r\n    font-size:30px;\r\n    color: #43425D;\r\n    text-transform: capitalize;\r\n}\r\n.section-view{\r\n    min-height: 50px;\r\n    padding-top: 62px;\r\n    padding-left:42px;\r\n    padding-right:42px;\r\n}\r\n.add {\r\n    color: #7808F7;\r\n    width: 22px;\r\n    height: 22px;\r\n    margin-bottom: 5px;\r\n}\r\n.load-status{\r\n    font-size:12px;\r\n    white-space: nowrap;\r\n    color: #707070;\r\n}\r\n</style>"]}]}