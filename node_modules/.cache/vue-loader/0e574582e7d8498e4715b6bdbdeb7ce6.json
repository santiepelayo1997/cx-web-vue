{"remainingRequest":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\src\\views\\Login.vue","mtime":1579574161192},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\iRipple\\Desktop\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport axios from 'axios';\r\nimport { setInterval } from 'timers';\r\nconst localStorage = window.localStorage;\r\n\r\nexport default {\r\n  name: 'login',\r\n  mounted () {\r\n      localStorage.removeItem(\"isAdmin\");\r\n      this.loginAttemptCounter = localStorage.getItem(\"loginAttemptCounter\") || 0\r\n      this.loginWaitingTime = localStorage.getItem(\"loginWaitingTime\") || 0\r\n      if(this.loginWaitingTime > 0){\r\n          this.$refs.loginButton.disabled = true\r\n          this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n      }\r\n       this.$store.dispatch('getApiDomain');\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n            accountName: '',\r\n            email: '',\r\n            password: '',\r\n            loginAttemptCounter: 0,\r\n            loginMessage: '',\r\n            userHashId: '',\r\n            loginWaitingTime: 0,\r\n            loginInterval: null,\r\n            loginProcessMsg: '',\r\n            loggingIn: false\r\n        }\r\n    },\r\n  methods: {\r\n    //   getUserHash:function(){\r\n    //         this.loggingIn = true\r\n    //         this.loginMsg = ''\r\n    //         this.loginAttemptCounter++;\r\n\r\n    //          if(this.loginAttemptCounter < 5)\r\n    //          {\r\n    //                 this.loginProcessMsg = \"Authenticating...\"\r\n                   \r\n    //                 axios.post(this.$store.getters.apiDomain +'tokens', {\r\n    //                     \"email\": this.email,\r\n    //                     \"password\": this.password,\r\n    //                     \"account\": this.accountName\r\n    //                 })\r\n    //                 .then(async (response) => {\r\n    //                     this.userHashId = response.data.userHashId\r\n    //                     localStorage.setItem('currentUser',response.data.userHashId)\r\n    //                     this.$store.state.db.tokens.add(response.data)\r\n    //                     this.loginProcessMsg = \"Getting user profile\"\r\n    //                     this.loginValidation(response.data.userHashId, response.data.token);\r\n    //                 })\r\n    //                 .catch((err) => {\r\n    //                     console.log(err)\r\n    //                     if(err.response === undefined){\r\n    //                         this.loginMessage = \"Login failed. Unable to contact server\"\r\n    //                         this.loginAttemptCounter--; //failed auth\r\n    //                     }else if(err.response.status == 403){\r\n    //                         this.loginMessage = \"Login failed. Invalid credentials\"\r\n    //                     }else{\r\n    //                         this.loginMessage = \"Login failed. Response code: \"+err.response.status\r\n    //                         this.loginAttemptCounter--; //failed auth, revert attempt\r\n    //                     }\r\n    //                     this.loggingIn = false\r\n    //                 })\r\n    //          }\r\n    //          else\r\n    //          {\r\n    //                 this.loggingIn = false\r\n    //                 if(this.loginWaitingTime == 0){\r\n    //                     this.$refs.loginButton.disabled = true\r\n    //                     this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n    //                 }\r\n    //                 this.loginWaitingTime += 60\r\n    //          }\r\n    //   },\r\n    //   async loginValidation(userHashId,token){\r\n    //            await axios.get(this.$store.getters.apiDomain+\"users/\"+userHashId, {\r\n    //                 headers:{\r\n    //                     Authorization:'Bearer '+ token\r\n    //                 },\r\n    //             })\r\n    //             .then(async (res) =>{\r\n    //                 this.loginProcessMsg = \"Building user profile\"\r\n    //                 await this.$store.state.db.users.put(res.data)\r\n    //                 await this.$store.dispatch('isSuperAdmin')\r\n    //                 //current account\r\n    //                 localStorage.setItem('currentAccount',res.data.accountHashId)\r\n    //                 //redirect\r\n    //                 this.$router.push('/Products')\r\n    //             })\r\n    //             .catch((autherr) => {\r\n    //                 if(autherr.response === undefined){\r\n    //                     this.loginMessage = \"Fetch failed. Unable to contact server\"\r\n    //                 }else if(autherr.response.status == 403){\r\n    //                     this.loginMessage = \"Fetch failed. User does not exist\"\r\n    //                 }else{\r\n    //                     this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\r\n    //                 }\r\n    //                 this.loggingIn = false\r\n    //             })\r\n    //   },\r\n    getBase64Image(img) {\r\n          var canvas = document.createElement(\"canvas\");\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n\r\n          var ctx = canvas.getContext(\"2d\");\r\n          ctx.drawImage(img, 0, 0);\r\n\r\n          var dataURL = canvas.toDataURL(\"image/png\");\r\n\r\n          return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\r\n      },\r\n      attemptLogin(){\r\n          this.loggingIn = true\r\n          this.loginMsg = ''\r\n          this.loginAttemptCounter++;\r\n          if(this.loginAttemptCounter < 5){\r\n            this.loginProcessMsg = \"Authenticating...\"\r\n       \r\n            axios.post(this.$store.getters.apiDomain +'tokens', {\r\n                \"email\": this.email,\r\n                \"password\": this.password,\r\n                \"account\": this.accountName\r\n            })\r\n            .then(async (response) => {\r\n                console.log(response)\r\n              if(response.status == 200){\r\n                this.loginAttemptCounter = 0\r\n                this.loginProcessMsg = \"Authenticated\"\r\n                localStorage.setItem(\"apiToken\",response.data.token);\r\n               // console.log(response.data.userHashId)\r\n                //store token\r\n                localStorage.setItem('currentUser',response.data.userHashId)\r\n                this.$store.state.db.tokens.add(response.data)\r\n                this.loginProcessMsg = \"Getting user profile\"\r\n              \r\n                await axios.get(this.$store.getters.apiDomain+\"users/\"+response.data.userHashId, {\r\n                    headers:{\r\n                        Authorization:'Bearer '+response.data.token\r\n                    },\r\n                })\r\n                .then(async (res) =>{\r\n                    this.loginProcessMsg = \"Building user profile\"\r\n                    // imgData = getBase64Image(res.data.photoUrl);\r\n                    // localStorage.setItem(\"imgData\", imgData);\r\n                    await this.$store.state.db.users.put(res.data)\r\n                    this.$store.dispatch('getUserDetails', res.data.hashId)\r\n                    localStorage.setItem('userHashId', res.data.hashId)\r\n                    await this.$store.dispatch('isSuperAdmin')\r\n                    //current account\r\n                    localStorage.setItem('currentAccount',res.data.accountHashId)\r\n                    //redirect\r\n                    this.$router.push('/main')\r\n                })\r\n                .catch((autherr) => {\r\n                    if(autherr.response === undefined){\r\n                        this.loginMessage = \"Fetch failed. Unable to contact server\"\r\n                    }else if(autherr.response.status == 403){\r\n                        this.loginMessage = \"Fetch failed. User does not exist\"\r\n                    }else{\r\n                        this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\r\n                    }\r\n                    this.loggingIn = false\r\n                })\r\n              }else{\r\n                this.loginMessage = \"Login failed. Response code: \"+response.status\r\n              }\r\n              this.loggingIn = false\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                if(err.response === undefined){\r\n                    this.loginMessage = \"Login failed. Unable to contact server\"\r\n                    this.loginAttemptCounter--; //failed auth\r\n                }else if(err.response.status == 403){\r\n                    this.loginMessage = \"Login failed. Invalid credentials\"\r\n                }else{\r\n                    this.loginMessage = \"Login failed. Response code: \"+err.response.status\r\n                    this.loginAttemptCounter--; //failed auth, revert attempt\r\n                }\r\n                this.loggingIn = false\r\n            })\r\n          }else{\r\n              this.loggingIn = false\r\n              if(this.loginWaitingTime == 0){\r\n                  this.$refs.loginButton.disabled = true\r\n                  this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n              }\r\n              this.loginWaitingTime += 60\r\n          }\r\n      },\r\n  },\r\n  watch:{\r\n    loginAttemptCounter(){\r\n        localStorage.setItem(\"loginAttemptCounter\",this.loginAttemptCounter)\r\n        if(this.loginAttemptCounter >= 5){\r\n            this.loginMessage = 'Too many failed login attempts.'\r\n        }\r\n    },\r\n    loginWaitingTime(){\r\n        localStorage.setItem(\"loginWaitingTime\",this.loginWaitingTime)\r\n        if(this.loginWaitingTime <= 0){\r\n            localStorage.setItem(\"loginWaitingTime\",0)\r\n            this.loginAttemptCounter = 0\r\n            this.loginMessage = 'Enter your account, email, and password'\r\n            clearInterval(this.loginInterval)\r\n            this.$refs.loginButton.disabled = false\r\n        }\r\n    }\r\n  },\r\n  computed: {\r\n      loginWaitingTimeStr(){\r\n        var str = ''\r\n        if(this.loginWaitingTime/60 >= 1){\r\n            str = parseInt(this.loginWaitingTime/60)+' minute(s) and '\r\n        }\r\n        str += (this.loginWaitingTime%60)+' seconds'\r\n        return str\r\n      }\r\n  }\r\n\r\n}\r\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"login full-height container-fluid\">\r\n      <div class=\"row full-height\">\r\n          <div class=\"col-md-8 full-height d-none d-md-block\">\r\n              \r\n          </div>\r\n          <div class=\"d-flex col-md-4 full-height col-sm-12 login-tab align-items-center\">\r\n              <div class=\"text-center col-md-12\">\r\n                <h1>Barter CX+</h1>\r\n                <div class=\"d-block floating-message-box\">{{ loginMessage }}</div>\r\n                <div class=\"d-block floating-message-box\"><span v-if=\"loginWaitingTime > 0\">Please wait for {{loginWaitingTimeStr}} </span></div>\r\n                <form v-on:submit.prevent=\"attemptLogin()\">\r\n                  <div class=\"form-group\">\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Account\" v-model=\"accountName\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <input type=\"email\" class=\"form-control\" placeholder=\"Email\" v-model=\"email\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <input type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"password\">\r\n                  </div>\r\n                  <button type=\"submit\" ref=\"loginButton\" class=\"btn btn-primary\" @click=\"attemptLogin()\">Authenticate</button>\r\n                  <br>\r\n                  <br>\r\n                  <div class=\"d-flex align-items-center col-md-12 justify-content-center\" v-if=\"loggingIn\">\r\n                    <div class=\"spinner-border\" role=\"status\">\r\n                        <span class=\"sr-only\">Loading..</span>\r\n                    </div> {{ loginProcessMsg }}\r\n                  </div>\r\n                </form>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from 'axios';\r\nimport { setInterval } from 'timers';\r\nconst localStorage = window.localStorage;\r\n\r\nexport default {\r\n  name: 'login',\r\n  mounted () {\r\n      localStorage.removeItem(\"isAdmin\");\r\n      this.loginAttemptCounter = localStorage.getItem(\"loginAttemptCounter\") || 0\r\n      this.loginWaitingTime = localStorage.getItem(\"loginWaitingTime\") || 0\r\n      if(this.loginWaitingTime > 0){\r\n          this.$refs.loginButton.disabled = true\r\n          this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n      }\r\n       this.$store.dispatch('getApiDomain');\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n            accountName: '',\r\n            email: '',\r\n            password: '',\r\n            loginAttemptCounter: 0,\r\n            loginMessage: '',\r\n            userHashId: '',\r\n            loginWaitingTime: 0,\r\n            loginInterval: null,\r\n            loginProcessMsg: '',\r\n            loggingIn: false\r\n        }\r\n    },\r\n  methods: {\r\n    //   getUserHash:function(){\r\n    //         this.loggingIn = true\r\n    //         this.loginMsg = ''\r\n    //         this.loginAttemptCounter++;\r\n\r\n    //          if(this.loginAttemptCounter < 5)\r\n    //          {\r\n    //                 this.loginProcessMsg = \"Authenticating...\"\r\n                   \r\n    //                 axios.post(this.$store.getters.apiDomain +'tokens', {\r\n    //                     \"email\": this.email,\r\n    //                     \"password\": this.password,\r\n    //                     \"account\": this.accountName\r\n    //                 })\r\n    //                 .then(async (response) => {\r\n    //                     this.userHashId = response.data.userHashId\r\n    //                     localStorage.setItem('currentUser',response.data.userHashId)\r\n    //                     this.$store.state.db.tokens.add(response.data)\r\n    //                     this.loginProcessMsg = \"Getting user profile\"\r\n    //                     this.loginValidation(response.data.userHashId, response.data.token);\r\n    //                 })\r\n    //                 .catch((err) => {\r\n    //                     console.log(err)\r\n    //                     if(err.response === undefined){\r\n    //                         this.loginMessage = \"Login failed. Unable to contact server\"\r\n    //                         this.loginAttemptCounter--; //failed auth\r\n    //                     }else if(err.response.status == 403){\r\n    //                         this.loginMessage = \"Login failed. Invalid credentials\"\r\n    //                     }else{\r\n    //                         this.loginMessage = \"Login failed. Response code: \"+err.response.status\r\n    //                         this.loginAttemptCounter--; //failed auth, revert attempt\r\n    //                     }\r\n    //                     this.loggingIn = false\r\n    //                 })\r\n    //          }\r\n    //          else\r\n    //          {\r\n    //                 this.loggingIn = false\r\n    //                 if(this.loginWaitingTime == 0){\r\n    //                     this.$refs.loginButton.disabled = true\r\n    //                     this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n    //                 }\r\n    //                 this.loginWaitingTime += 60\r\n    //          }\r\n    //   },\r\n    //   async loginValidation(userHashId,token){\r\n    //            await axios.get(this.$store.getters.apiDomain+\"users/\"+userHashId, {\r\n    //                 headers:{\r\n    //                     Authorization:'Bearer '+ token\r\n    //                 },\r\n    //             })\r\n    //             .then(async (res) =>{\r\n    //                 this.loginProcessMsg = \"Building user profile\"\r\n    //                 await this.$store.state.db.users.put(res.data)\r\n    //                 await this.$store.dispatch('isSuperAdmin')\r\n    //                 //current account\r\n    //                 localStorage.setItem('currentAccount',res.data.accountHashId)\r\n    //                 //redirect\r\n    //                 this.$router.push('/Products')\r\n    //             })\r\n    //             .catch((autherr) => {\r\n    //                 if(autherr.response === undefined){\r\n    //                     this.loginMessage = \"Fetch failed. Unable to contact server\"\r\n    //                 }else if(autherr.response.status == 403){\r\n    //                     this.loginMessage = \"Fetch failed. User does not exist\"\r\n    //                 }else{\r\n    //                     this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\r\n    //                 }\r\n    //                 this.loggingIn = false\r\n    //             })\r\n    //   },\r\n    getBase64Image(img) {\r\n          var canvas = document.createElement(\"canvas\");\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n\r\n          var ctx = canvas.getContext(\"2d\");\r\n          ctx.drawImage(img, 0, 0);\r\n\r\n          var dataURL = canvas.toDataURL(\"image/png\");\r\n\r\n          return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\r\n      },\r\n      attemptLogin(){\r\n          this.loggingIn = true\r\n          this.loginMsg = ''\r\n          this.loginAttemptCounter++;\r\n          if(this.loginAttemptCounter < 5){\r\n            this.loginProcessMsg = \"Authenticating...\"\r\n       \r\n            axios.post(this.$store.getters.apiDomain +'tokens', {\r\n                \"email\": this.email,\r\n                \"password\": this.password,\r\n                \"account\": this.accountName\r\n            })\r\n            .then(async (response) => {\r\n                console.log(response)\r\n              if(response.status == 200){\r\n                this.loginAttemptCounter = 0\r\n                this.loginProcessMsg = \"Authenticated\"\r\n                localStorage.setItem(\"apiToken\",response.data.token);\r\n               // console.log(response.data.userHashId)\r\n                //store token\r\n                localStorage.setItem('currentUser',response.data.userHashId)\r\n                this.$store.state.db.tokens.add(response.data)\r\n                this.loginProcessMsg = \"Getting user profile\"\r\n              \r\n                await axios.get(this.$store.getters.apiDomain+\"users/\"+response.data.userHashId, {\r\n                    headers:{\r\n                        Authorization:'Bearer '+response.data.token\r\n                    },\r\n                })\r\n                .then(async (res) =>{\r\n                    this.loginProcessMsg = \"Building user profile\"\r\n                    // imgData = getBase64Image(res.data.photoUrl);\r\n                    // localStorage.setItem(\"imgData\", imgData);\r\n                    await this.$store.state.db.users.put(res.data)\r\n                    this.$store.dispatch('getUserDetails', res.data.hashId)\r\n                    localStorage.setItem('userHashId', res.data.hashId)\r\n                    await this.$store.dispatch('isSuperAdmin')\r\n                    //current account\r\n                    localStorage.setItem('currentAccount',res.data.accountHashId)\r\n                    //redirect\r\n                    this.$router.push('/main')\r\n                })\r\n                .catch((autherr) => {\r\n                    if(autherr.response === undefined){\r\n                        this.loginMessage = \"Fetch failed. Unable to contact server\"\r\n                    }else if(autherr.response.status == 403){\r\n                        this.loginMessage = \"Fetch failed. User does not exist\"\r\n                    }else{\r\n                        this.loginMessage = \"Fetch failed. Response code: \"+autherr.response.status\r\n                    }\r\n                    this.loggingIn = false\r\n                })\r\n              }else{\r\n                this.loginMessage = \"Login failed. Response code: \"+response.status\r\n              }\r\n              this.loggingIn = false\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                if(err.response === undefined){\r\n                    this.loginMessage = \"Login failed. Unable to contact server\"\r\n                    this.loginAttemptCounter--; //failed auth\r\n                }else if(err.response.status == 403){\r\n                    this.loginMessage = \"Login failed. Invalid credentials\"\r\n                }else{\r\n                    this.loginMessage = \"Login failed. Response code: \"+err.response.status\r\n                    this.loginAttemptCounter--; //failed auth, revert attempt\r\n                }\r\n                this.loggingIn = false\r\n            })\r\n          }else{\r\n              this.loggingIn = false\r\n              if(this.loginWaitingTime == 0){\r\n                  this.$refs.loginButton.disabled = true\r\n                  this.loginInterval = setInterval(() => {this.loginWaitingTime--;},1000)\r\n              }\r\n              this.loginWaitingTime += 60\r\n          }\r\n      },\r\n  },\r\n  watch:{\r\n    loginAttemptCounter(){\r\n        localStorage.setItem(\"loginAttemptCounter\",this.loginAttemptCounter)\r\n        if(this.loginAttemptCounter >= 5){\r\n            this.loginMessage = 'Too many failed login attempts.'\r\n        }\r\n    },\r\n    loginWaitingTime(){\r\n        localStorage.setItem(\"loginWaitingTime\",this.loginWaitingTime)\r\n        if(this.loginWaitingTime <= 0){\r\n            localStorage.setItem(\"loginWaitingTime\",0)\r\n            this.loginAttemptCounter = 0\r\n            this.loginMessage = 'Enter your account, email, and password'\r\n            clearInterval(this.loginInterval)\r\n            this.$refs.loginButton.disabled = false\r\n        }\r\n    }\r\n  },\r\n  computed: {\r\n      loginWaitingTimeStr(){\r\n        var str = ''\r\n        if(this.loginWaitingTime/60 >= 1){\r\n            str = parseInt(this.loginWaitingTime/60)+' minute(s) and '\r\n        }\r\n        str += (this.loginWaitingTime%60)+' seconds'\r\n        return str\r\n      }\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.full-height{\r\n    height: 100vh;\r\n}\r\n\r\n\r\n.floating-message-box{\r\n    min-height: 20px;\r\n    font-size: 15px;\r\n}\r\n\r\n</style>"]}]}