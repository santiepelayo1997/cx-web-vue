{"remainingRequest":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\src\\components\\Loader.vue?vue&type=style&index=0&id=04a0d67a&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\src\\components\\Loader.vue","mtime":1576630131929},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\css-loader\\index.js","mtime":1571017171576},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1571017172902},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1571017172796},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1571017171362},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1571017172902}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.loading-screen{\r\n    position: absolute;\r\n    padding-top: 200px;\r\n    height: 500px;\r\n    width: 100%;\r\n}\r\n.btn-adj{\r\n    position: relative;\r\n    top: 5px;\r\n}\r\n\r\n.btn-text-adj{\r\n    font-size: 20px;\r\n}\r\n\r\n",{"version":3,"sources":["Loader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Loader.vue","sourceRoot":"src/components","sourcesContent":["<template >\r\n    <div class=\"row loader\"  >\r\n        <div class=\"col-md-12\">\r\n            <div class=\"loading-screen text-center\"  >\r\n                <div>\r\n                  <div v-if=\"showRetry\">\r\n                    <button @click=\"retrySync\" class=\"btn btn-sm btn-secondary btn-text-adj\">Retry <i class=\"material-icons btn-adj\">refresh</i></button> &nbsp;\r\n                    <button @click=\"skipSync\" class=\"btn btn-sm btn-warning btn-text-adj\">Skip updating records <i class=\"material-icons btn-adj\">report_problem</i></button>\r\n                  </div>\r\n                  <div v-else class=\"spinner-border\" style=\"width:100px;height:100px\" role=\"status\">\r\n                    <span class=\"sr-only\" >Loading...</span>\r\n                  </div>\r\n                </div>\r\n                <br>\r\n                {{ loadingMessage }}<br>\r\n                <span v-if=\"totalPages >= 1\">\r\n                    {{ currentPage}} of {{ totalPages }}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { setInterval, clearInterval } from 'timers';\r\nimport {mapActions} from 'vuex'\r\n//const localStorage = window.localStorage;\r\n\r\nexport default {\r\n    name: 'Loader',\r\n    mounted() {\r\n            try\r\n            {\r\n                clearInterval(this.retryInteval)\r\n            }\r\n            catch(e)\r\n            {\r\n                console.log(\"No interval to clear\")\r\n            }\r\n            if(this.$store.getters.hasAccess(this.apiModel,'list','*'))\r\n            this.apiSync();\r\n    },\r\n    data: function() {\r\n        return {\r\n            currentPage: 0,\r\n            totalPages: 0,\r\n            loadingMessage: 'Loading',\r\n            showRetry: false,\r\n            retryCountdown: null,\r\n            retryInterval: null,\r\n        }\r\n    },\r\n    props: {\r\n        apiModel: String,\r\n        indexedFilter: Object\r\n    },\r\n    methods: {\r\n        skipSync: function(){\r\n            this.$emit(\"doneLoading\")\r\n        },\r\n        retrySync: function (){\r\n            if(this.retryCountdown >= 0){\r\n                try{\r\n                    clearInterval(this.retryInterval)\r\n                }catch(e){\r\n                    console.log(\"Problem clearing interval\")\r\n                }\r\n                this.retryCountdown = 3\r\n                this.loadingMessage = 'Retrying in '+this.retryCountdown+\" seconds\"\r\n                this.retryInterval = setInterval(() => {\r\n                    this.retryCountdown--;\r\n                    this.loadingMessage = 'Retrying in '+this.retryCountdown+\" seconds\"\r\n                },1000)\r\n            }\r\n        },\r\n        ...mapActions(\r\n            [\r\n                'cloudLastUpdatedAt',\r\n                'getUpdateCount',\r\n                'getRequest'\r\n            ]\r\n        ),\r\n        apiSync: async function() {\r\n\r\n            //check last updated at\r\n            this.showRetry = false\r\n            this.loadingMessage = 'Loading'\r\n            this.currentPage = 0\r\n            try{\r\n         \r\n                let clua = await this.cloudLastUpdatedAt({\"endpoint\": this.apiModel,\"urlParams\": this.filters})\r\n                let lua = await this.$store.getters.lastUpdatedAtUtc(this.apiModel)\r\n            \r\n                let dclua = Date.parse(clua)\r\n                let dlua = Date.parse(lua)\r\n                let dnow = Date.now()\r\n                \r\n                if(dclua > dlua){\r\n                    //there's an update\r\n                    let dnow = Date.now()\r\n                    let icount = await this.getUpdateCount({\"endpoint\": this.apiModel,\"urlParams\": {...this.filters,\"after\": new Date(dlua).toISOString(), \"to\": new Date(dnow).toISOString()}})\r\n                    if(icount == -1){\r\n                        this.loadingMessage = \"An error occurred while downloading list of accounts.\"\r\n                    }\r\n                    this.totalPages = Math.ceil(icount / 50)\r\n                    let successFlag = true\r\n                \r\n                    syncloop: for(var i = 1; i <= this.totalPages; i++){\r\n                        this.currentPage = i\r\n                        let objArr = await this.getRequest({\"endpoint\": this.apiModel,\"urlParams\":{...this.filters,\"page\":i,\"after\": new Date(dlua).toISOString(), \"to\": new Date(dnow).toISOString()}})\r\n                        if(objArr.status != 200){\r\n                            successFlag = false;\r\n                        }else{\r\n                           \r\n                            await this.$store.state.db[this.apiModel].bulkPut(objArr.data).then(() => {\r\n                                console.log(\"updated page \"+this.currentPage)\r\n                            }).catch((err) => {\r\n                                console.log(\"error:\"+err)\r\n                            })\r\n                        }\r\n                        if(!successFlag){\r\n                            break syncloop;\r\n                        }\r\n                    }\r\n                    if(successFlag){\r\n                        this.$store.getters.updateLocalTimestamp(this.apiModel,new Date(dnow).toISOString())\r\n                        this.$emit(\"doneLoading\")\r\n                    }else{\r\n                        this.showRetry = true\r\n                    }\r\n\r\n                }else{\r\n                 \r\n                    this.$store.getters.updateLocalTimestamp(this.apiModel,new Date(dnow).toISOString())\r\n                    this.$emit(\"doneLoading\")\r\n                }\r\n            }catch(e){\r\n                this.showRetry = true;\r\n            }\r\n\r\n            \r\n        },\r\n    },\r\n    watch:{\r\n        showRetry(){\r\n            if(this.showRetry)\r\n                this.loadingMessage = \"Error encountered while downloading \"+this.apiModel\r\n        },\r\n        retryCountdown(){\r\n            if(this.retryCountdown <= 0){\r\n                clearInterval(this.retryInterval)\r\n                this.apiSync()\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        filters(){\r\n            if(localStorage.getItem('currentAccount') != null && localStorage.getItem('currentAccount') != undefined && this.apiModel != \"accounts\"){\r\n                return {\"accountHashId\": localStorage.getItem('currentAccount'), ...this.indexedFilter}\r\n            }else{\r\n                return this.indexedFilter\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.loading-screen{\r\n    position: absolute;\r\n    padding-top: 200px;\r\n    height: 500px;\r\n    width: 100%;\r\n}\r\n.btn-adj{\r\n    position: relative;\r\n    top: 5px;\r\n}\r\n\r\n.btn-text-adj{\r\n    font-size: 20px;\r\n}\r\n\r\n</style>"]}]}