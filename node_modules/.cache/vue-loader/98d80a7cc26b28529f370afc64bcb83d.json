{"remainingRequest":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\src\\views\\Users.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\src\\views\\Users.vue","mtime":1576733973053},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1571017171362},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1571017108564},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1571017171362},{"path":"C:\\Users\\Santie\\Desktop\\CXWEBVUE\\cx-web-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1571017172902}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport Navigation from '@/components/Navigation.vue'\r\nimport Sidebar from '@/components/Sidebar.vue'\r\nimport Loader from '@/components/Loader.vue'\r\nimport TableList from '@/components/TableList.vue'\r\nimport FormBuilder from '@/components/FormBuilder.vue'\r\nimport axios from 'axios';\r\nexport default {\r\n  name: 'Users',\r\n  mounted () {\r\n     let tableName = this.$store.state.userGroupName;\r\n     this.$store.dispatch('getBranches');\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n            showModal: false,\r\n            showModalChangePass: false,\r\n            showModalUpdate: false,\r\n            syncing: true,\r\n            photoUrl: '',\r\n            file: '',\r\n            tableName: this.$store.state.userGroupName,\r\n            showFields: {\r\n                \"orderBy\": \"email\",\r\n                \"orientation\": \"asc\",\r\n                \"list\": ['name','code','mobileNo','email'],\r\n            },\r\n             iconButtons: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"fas fa-pen\",\r\n                  callName: \"retrieveData\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"deleteUser\",\r\n                  uiName: \"fas fa-times\",\r\n                  callName: \"delete\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"blockData\",\r\n                  uiName: \"fas fa-ban\",\r\n                  callName: \"block\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"block\",\r\n                  uiName: \"fas fa-user-edit\",\r\n                  callName: \"openChangePassModal\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n              ],\r\n              btnAdd:[{\r\n                name:\"btnAdd\",\r\n                callName: \"btnAddModal\"\r\n              }],\r\n              btnBack: [\r\n                {\r\n                  tableName: \"Roles\",\r\n                  callName: \"btnBack\"\r\n                }\r\n              ],\r\n              btnClose: [\r\n                {\r\n                  name: \"btnClose\",\r\n                  uiName: \"Cancel\",\r\n                  callName: \"closeModal\",\r\n                }\r\n              ],\r\n             cardButtonUpdate: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"putData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              formChangePass: [\r\n                {\r\n                  name: \"password\",\r\n                  inputId: \"password\",\r\n                  labelName: \"New Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input New Password\",\r\n                  type: \"password\",\r\n                  inputType: \"password\",\r\n                  ifRequired: true,\r\n                  max: 200\r\n                },\r\n                {\r\n                  name: \"confirmPassword\",\r\n                  inputId: \"confirmPassword\",\r\n                  labelName: \"Confirm Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Password did not match..\",\r\n                  type: \"password\",\r\n                  inputType: \"password\",\r\n                  ifRequired: true,\r\n                  max: 200\r\n                }\r\n              ],\r\n              form: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  inputType: \"varchar\",\r\n                  max: 120,\r\n                  ifRequired: true\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  errorName: \"Please input Code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 50\r\n                },\r\n                {\r\n                  name: \"userName\",\r\n                  inputId: \"userName\",\r\n                  errorName: \"Please input Username\",\r\n                  labelName: \"Username:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 120  \r\n                },\r\n                {\r\n                  name: \"mobileNo\",\r\n                  inputId: \"mobileNo\",\r\n                  errorName: \"Please input Mobile Number\",\r\n                  labelName: \"Mobile No.:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"number\",\r\n                  max: 12  \r\n                },\r\n                {\r\n                  name: \"password\",\r\n                  inputId: \"password\",\r\n                  errorName: \"Please input password\",\r\n                  labelName: \"Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"password\",\r\n                  type: \"password\",\r\n                  ifRequired: true\r\n                },\r\n                 {\r\n                  name: \"confirmPassword\",\r\n                  inputId: \"confirmPassword\",\r\n                  labelName: \"Confirm Password:\",\r\n                  errorName: \"Password did not match\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  type: \"password\",\r\n                  ifRequired: true\r\n                },\r\n                 {\r\n                  name: \"email\",\r\n                  errorName: \"Please input a valid email\",\r\n                  inputId: \"email\",\r\n                  labelName: \"Email:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"email\",\r\n                  max: 200\r\n                },\r\n                {\r\n                  name: \"userGroupHashId\",\r\n                  inputId: \"userGroupHashId\",\r\n                  inputType: \"hidden\",\r\n                  type: \"hidden\"\r\n                }\r\n              ],\r\n              formUpdate: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  inputType: \"varchar\",\r\n                  max: 120,\r\n                  ifRequired: true\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  errorName: \"Please input Code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 50\r\n                },\r\n                {\r\n                  name: \"userName\",\r\n                  inputId: \"userName\",\r\n                  errorName: \"Please input Username\",\r\n                  labelName: \"Username:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 120  \r\n                },\r\n                 {\r\n                  name: \"mobileNo\",\r\n                  inputId: \"mobileNo\",\r\n                  errorName: \"Please input Mobile Number\",\r\n                  labelName: \"Mobile No.:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"number\",\r\n                  max: 12  \r\n                },\r\n                 {\r\n                  name: \"email\",\r\n                  inputId: \"email\",\r\n                  errorName: \"Please input a valid email\",\r\n                  labelName: \"Email:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"email\",\r\n                  max: 200\r\n                },\r\n              ],\r\n               formSelect: [{\r\n                  labelName: \"Branches:\",\r\n                  name: \"homeBranchHashId\",\r\n                  formSelectCol: \"col-md-6\",\r\n                  inputType: \"select\",\r\n                  callName: \"selectBranch\",\r\n                  errorName: \"Please select Branch\",\r\n                  options: JSON.parse(localStorage.getItem('listOfBranches')),\r\n                  defaultPlaceholder: \"Branches\",\r\n                  selectId: \"homeBranchHashId\",\r\n                  className: \"select form-control\",\r\n                  ifRequired: true\r\n                }],\r\n               uploadTextBox: [{\r\n                  name: \"photoUrl\",\r\n                  inputType: \"file\",\r\n                  labelName: \"Upload Photo:\",\r\n                  cardInputCol: \"col-12\",\r\n                  acceptUpload: \"image/x-png,image/jpeg\"\r\n              }],\r\n               cardButton: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Create\",\r\n                  callName: \"postData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n             changePassBtn: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"changePassword\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              iconColor: [\r\n                 {\r\n                     color: '#CBCBCB'\r\n                 }\r\n              ],\r\n              indexedFilter: {\r\n                status : \"A\"\r\n              },\r\n              filterObjectValue: this.$store.state.userGroupHashId,\r\n              filterObject: {\r\n                value: \"userGroup\",\r\n                property: \"hashId\"\r\n              },\r\n            \r\n        }\r\n    },\r\n  components: {\r\n      Navigation,\r\n      Sidebar,\r\n      Loader,\r\n      TableList,\r\n      FormBuilder\r\n  },\r\n  methods: {\r\n      stopSync: function () {\r\n          this.syncing = false\r\n      },\r\n      closeModal: function(){\r\n        this.$store.state.showModal = false\r\n        this.$store.state.showModalUpdate = false\r\n        this.$store.state.showModalChangePass = false\r\n        this.$store.state.loading = false\r\n        this.showModalUpdate = false\r\n      },\r\n      openModal: function (){\r\n        this.$store.state.showModal = true\r\n      },\r\n      openChangePassModal: function(hashId){\r\n        this.$store.state.selectedUserHash = hashId\r\n   \r\n      //  localStorage.setItem('selectedUserHash', hashId)\r\n        this.$store.state.showModalChangePass = true\r\n      },\r\n      getBranches () {\r\n          this.$store.dispatch('getBranches')\r\n      },\r\n      // async openModalUpdate (hashId){\r\n      //       this.showModalUpdate = true\r\n\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       localStorage.setItem('userHashUpdate', hashId)\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //       };\r\n      //       let res = await axios.get(apiDomain + 'users/' + hashId, axiosConfig)\r\n      //      .then((res) => {\r\n      //             document.getElementById(\"name\").value = res.data.name\r\n      //             document.getElementById(\"code\").value = res.data.code\r\n      //             document.getElementById(\"mobileNo\").value = res.data.mobileNo\r\n      //             document.getElementById(\"userName\").value= res.data.userName\r\n      //             document.getElementById(\"email\").value = res.data.email\r\n      //              if(res.data.photoUrl == \"\"){\r\n      //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\r\n      //             }\r\n      //             else if(res.data.photoUrl == null){\r\n      //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\r\n      //             }else{\r\n      //             document.getElementById(\"imgPreview\").src = res.data.photoUrl\r\n      //            }\r\n      //       })\r\n      //      .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      // },\r\n      // async updateData(){\r\n      //           let hashId = await localStorage.getItem(\"userHashUpdate\");\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //           let domain = await localStorage.getItem(\"domain\");\r\n      //           let photoUrl;\r\n      //           let formData = new FormData();\r\n      //           if(this.file != null && this.file != \"\"){\r\n      //                  formData.append('file', this.file, this.file.name);\r\n                      \r\n      //                  let response = await axios.post(apiDomain + 'uploads/' + modelName,\r\n      //                   formData,\r\n      //                   {\r\n      //                   headers: {\r\n      //                       'Content-Type': 'multipart/form-data',\r\n      //                         \"Authorization\": \"Bearer \"+ token\r\n      //                     }\r\n      //                   })\r\n      //                   .then((response) => {\r\n      //                         photoUrl = \"http://\" + domain + response.data[0].photoUrl\r\n      //                         console.log(photoUrl);\r\n      //                   })\r\n      //                   .catch((err) => {\r\n      //                       console.log(\"AXIOS ERROR: \", err);\r\n      //                 })\r\n      //           }else{\r\n      //              photoUrl =  this.photoUrl\r\n      //           }\r\n                 \r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'users/' + hashId ,\r\n      //               data: {\r\n                      \r\n      //                   name:  document.getElementById(\"name\").value,\r\n      //                   code:  document.getElementById(\"code\").value,\r\n      //                   mobileNo:  document.getElementById(\"mobileNo\").value,\r\n      //                   userName:  document.getElementById(\"userName\").value,\r\n      //                   email:  document.getElementById(\"email\").value,\r\n      //                   photoUrl:  photoUrl\r\n      //               },\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               this.showModalUpdate = false;\r\n      //               alert(\"Succesfully Updated!\");\r\n      //                location.reload();\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      // },\r\n      // async blockUser (hashId) {\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'users/' + hashId + '/block',\r\n      //               data: {status: \"B\"},\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Blocked!\");\r\n      //                location.reload();\r\n\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  },\r\n       linkToParent: function(){\r\n          this.$router.push({ name: 'UserGroups' })\r\n       },\r\n   \r\n      // async changePassword () {\r\n\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let userHash = await localStorage.getItem(\"selectedUserHash\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'post',\r\n      //               url: apiDomain + 'users/' + userHash + '/changepass',\r\n      //              data: {\r\n\t    //                 newPassword: document.getElementById(\"newPassword\").value\r\n      //              },\r\n      //              headers: {\r\n      //                 Authorization: 'Bearer ' + token\r\n      //             }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Changed!\");\r\n      //               this.showModalChangePass = false;\r\n      //                location.reload();\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  },\r\n       async selectedBranch () {\r\n              var e = document.getElementById(\"homeBranchHashId\");\r\n              var item = e.options[e.selectedIndex].value;\r\n              localStorage.setItem(\"homeBranchHashId\",item)\r\n\r\n              if ( document.getElementById('homeBranchHashId').value !== \"\"){\r\n                 document.getElementById(\"homeBranchHashId\").classList.remove('is-invalid');\r\n             }\r\n       },\r\n      //  validation: function(e){\r\n\r\n      //     let password =  document.getElementById(\"password\").value;\r\n      //     let confirmPassword =  document.getElementById(\"confirmPassword\").value;\r\n      //     let email =  document.getElementById(\"email\").value;\r\n      //     let re = /[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}/igm;\r\n\r\n      //     const form = document.querySelector('form');\r\n      //     var txt = \"\";\r\n      //     for (var i = 0; i < form.length; i++) {\r\n      //         if(form.elements[i].value ==\"\"){\r\n      //             form.elements[i].classList.add('is-invalid')\r\n      //         }\r\n      //     }\r\n\r\n      //     if(password == \"\" && confirmPassword == \"\"){\r\n      //           document.getElementById(\"password\").classList.add('is-invalid');\r\n      //            document.getElementById(\"confirmPassword\").classList.add('is-invalid');\r\n      //     }else{\r\n      //           document.getElementById(\"password\").classList.remove('is-invalid');\r\n      //           document.getElementById(\"confirmPassword\").classList.remove('is-invalid');\r\n\r\n      //           if(document.getElementById(\"password\").value!=document.getElementById(\"confirmPassword\").value){\r\n      //                   document.getElementById(\"confirmPassword\").classList.add('is-invalid');\r\n      //           }else{\r\n      //                   document.getElementById(\"confirmPassword\").classList.remove('is-invalid');\r\n      //           }\r\n      //     }\r\n\r\n      //     if (email == '' || !re.test(email))\r\n      //     {\r\n      //         document.getElementById(\"email\").classList.add('is-invalid');\r\n      //         return false;\r\n      //     }\r\n       \r\n      //     this.saveNewData();\r\n\r\n      //  },\r\n      //   async saveNewData (){\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //       let domain = await localStorage.getItem(\"domain\");\r\n      //       let formData = new FormData();\r\n      //       let photoUrl;\r\n      //       if(this.file != null && this.file != \"\"){\r\n      //               formData.append('file', this.file, this.file.name);\r\n                  \r\n      //               let response = await axios.post(apiDomain + 'uploads/' + modelName,\r\n      //               formData,\r\n      //               {\r\n      //               headers: {\r\n      //                   'Content-Type': 'multipart/form-data',\r\n      //                     \"Authorization\": \"Bearer \"+ token\r\n      //                 }\r\n      //               })\r\n      //               .then((response) => {\r\n      //                     photoUrl = \"http://\" + domain + response.data[0].photoUrl\r\n      //               })\r\n      //               .catch((err) => {\r\n      //                   console.log(\"AXIOS ERROR: \", err);\r\n      //             })\r\n\r\n      //       }else{\r\n      //           photoUrl = this.photoUrl\r\n      //       }\r\n\r\n      //       let  postData = {\r\n      //             name:  document.getElementById(\"name\").value,\r\n      //             code:  document.getElementById(\"code\").value,\r\n      //             mobileNo:  document.getElementById(\"mobileNo\").value,\r\n      //             userName:  document.getElementById(\"userName\").value,\r\n      //             email:  document.getElementById(\"email\").value,\r\n      //             password:  document.getElementById(\"password\").value,\r\n      //             homeBranchHashId: localStorage.getItem(\"homeBranchHashId\"),\r\n      //             userGroupHashId: localStorage.getItem(\"userGroupHashId\"),\r\n      //             photoUrl: photoUrl\r\n      //       }\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //         };\r\n\r\n      //       let res = await axios.post(apiDomain + 'users', postData, axiosConfig)\r\n      //         .then((res) => {\r\n      //            console.log(\"RESPONSE RECEIVED: \", res);\r\n      //            document.getElementById(\"name\").value = \"\";\r\n      //            document.getElementById(\"code\").value = \"\";\r\n      //            document.getElementById(\"mobileNo\").value = \"\";\r\n      //            document.getElementById(\"userName\").value = \"\";\r\n      //            document.getElementById(\"email\").value = \"\";\r\n      //            document.getElementById(\"password\").value = \"\";\r\n      //            alert(\"Succesfully Added!\");\r\n      //            this.showModal = false;\r\n      //             location.reload();\r\n      //       })\r\n      //         .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      \r\n         \r\n      // }\r\n  },\r\n  watch:{\r\n  },\r\n  computed: {\r\n  }\r\n\r\n}\r\n",{"version":3,"sources":["Users.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Users.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div>\r\n        <Navigation/>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n            \r\n                 <FormBuilder\r\n                    api-model=\"users\"\r\n                    card-title=\"Create New User\"\r\n                    :card-button=\"cardButton\"\r\n                    success-message=\"User Succesfully Added!\"\r\n                    v-if=\"this.$store.state.showModal\"  \r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :card-input=\"form\"\r\n                    :form-select=\"formSelect\"\r\n                    @selectBranch=\"selectedBranch\"\r\n                    :btn-close=\"btnClose\"\r\n                    @closeModal=\"closeModal\"\r\n                    :card-upload=\"uploadTextBox\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n                 <FormBuilder\r\n                    api-model=\"users\"\r\n                    card-title=\"Change Password\"\r\n                    :card-button=\"changePassBtn\"\r\n                    :card-input=\"formChangePass\"\r\n                    success-message=\"Password Succesfully Updated!\"\r\n                    v-if=\"this.$store.state.showModalChangePass\"  \r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :btn-close=\"btnClose\"\r\n                    @closeModal=\"closeModal\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n                 <FormBuilder\r\n                    api-model=\"users\" \r\n                    card-title=\"Update User\"\r\n                    :card-button=\"cardButtonUpdate\"\r\n                    card-size=\"modal-dialog modal-dialog-centered modal-lg\"\r\n                    :card-input=\"formUpdate\"\r\n                    v-if=\"this.$store.state.showModalUpdate\"  \r\n                    @closeModal=\"closeModal\"\r\n                    :btn-close=\"btnClose\"\r\n                    :card-upload=\"uploadTextBox\"\r\n                    :loading=\"this.$store.state.loading\"\r\n                 />\r\n\r\n\r\n                  <div class=\"col-12\">\r\n                        <template v-if=\"syncing == true\">\r\n                            <Loader api-model=\"users\" @doneLoading=\"stopSync\" :indexed-filter=\"indexedFilter\" />\r\n                        </template>\r\n                        <template v-else>\r\n                        <TableList \r\n                            api-model=\"users\" \r\n                            :card-upload=\"uploadTextBox\"\r\n                            :card-input=\"formUpdate\"\r\n                            :table-name=\"tableName\"\r\n                            :show-fields=\"showFields\" \r\n                            :indexed-filter=\"indexedFilter\" \r\n                            :filter-object=\"filterObject\"\r\n                            :filter-value=\"filterObjectValue\" \r\n                            :icon-buttons=\"iconButtons\"\r\n                            :icon-color=\"iconColor\"\r\n                            :btn-add=\"btnAdd\"\r\n                            @openChangePassModal=\"openChangePassModal\"\r\n                            :btn-back=\"btnBack\"\r\n                            @btnBack=\"linkToParent\"\r\n                            @btnAddModal=\"openModal\"\r\n                        />\r\n                        </template>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport Navigation from '@/components/Navigation.vue'\r\nimport Sidebar from '@/components/Sidebar.vue'\r\nimport Loader from '@/components/Loader.vue'\r\nimport TableList from '@/components/TableList.vue'\r\nimport FormBuilder from '@/components/FormBuilder.vue'\r\nimport axios from 'axios';\r\nexport default {\r\n  name: 'Users',\r\n  mounted () {\r\n     let tableName = this.$store.state.userGroupName;\r\n     this.$store.dispatch('getBranches');\r\n  },\r\n  data:\r\n    function() {\r\n        return{\r\n            showModal: false,\r\n            showModalChangePass: false,\r\n            showModalUpdate: false,\r\n            syncing: true,\r\n            photoUrl: '',\r\n            file: '',\r\n            tableName: this.$store.state.userGroupName,\r\n            showFields: {\r\n                \"orderBy\": \"email\",\r\n                \"orientation\": \"asc\",\r\n                \"list\": ['name','code','mobileNo','email'],\r\n            },\r\n             iconButtons: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"fas fa-pen\",\r\n                  callName: \"retrieveData\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"deleteUser\",\r\n                  uiName: \"fas fa-times\",\r\n                  callName: \"delete\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"blockData\",\r\n                  uiName: \"fas fa-ban\",\r\n                  callName: \"block\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n                {\r\n                  name: \"block\",\r\n                  uiName: \"fas fa-user-edit\",\r\n                  callName: \"openChangePassModal\",\r\n                  accepting: [\"hashId\"]\r\n                },\r\n              ],\r\n              btnAdd:[{\r\n                name:\"btnAdd\",\r\n                callName: \"btnAddModal\"\r\n              }],\r\n              btnBack: [\r\n                {\r\n                  tableName: \"Roles\",\r\n                  callName: \"btnBack\"\r\n                }\r\n              ],\r\n              btnClose: [\r\n                {\r\n                  name: \"btnClose\",\r\n                  uiName: \"Cancel\",\r\n                  callName: \"closeModal\",\r\n                }\r\n              ],\r\n             cardButtonUpdate: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"putData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              formChangePass: [\r\n                {\r\n                  name: \"password\",\r\n                  inputId: \"password\",\r\n                  labelName: \"New Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input New Password\",\r\n                  type: \"password\",\r\n                  inputType: \"password\",\r\n                  ifRequired: true,\r\n                  max: 200\r\n                },\r\n                {\r\n                  name: \"confirmPassword\",\r\n                  inputId: \"confirmPassword\",\r\n                  labelName: \"Confirm Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Password did not match..\",\r\n                  type: \"password\",\r\n                  inputType: \"password\",\r\n                  ifRequired: true,\r\n                  max: 200\r\n                }\r\n              ],\r\n              form: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  inputType: \"varchar\",\r\n                  max: 120,\r\n                  ifRequired: true\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  errorName: \"Please input Code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 50\r\n                },\r\n                {\r\n                  name: \"userName\",\r\n                  inputId: \"userName\",\r\n                  errorName: \"Please input Username\",\r\n                  labelName: \"Username:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 120  \r\n                },\r\n                {\r\n                  name: \"mobileNo\",\r\n                  inputId: \"mobileNo\",\r\n                  errorName: \"Please input Mobile Number\",\r\n                  labelName: \"Mobile No.:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"number\",\r\n                  max: 12  \r\n                },\r\n                {\r\n                  name: \"password\",\r\n                  inputId: \"password\",\r\n                  errorName: \"Please input password\",\r\n                  labelName: \"Password:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"password\",\r\n                  type: \"password\",\r\n                  ifRequired: true\r\n                },\r\n                 {\r\n                  name: \"confirmPassword\",\r\n                  inputId: \"confirmPassword\",\r\n                  labelName: \"Confirm Password:\",\r\n                  errorName: \"Password did not match\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  type: \"password\",\r\n                  ifRequired: true\r\n                },\r\n                 {\r\n                  name: \"email\",\r\n                  errorName: \"Please input a valid email\",\r\n                  inputId: \"email\",\r\n                  labelName: \"Email:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"email\",\r\n                  max: 200\r\n                },\r\n                {\r\n                  name: \"userGroupHashId\",\r\n                  inputId: \"userGroupHashId\",\r\n                  inputType: \"hidden\",\r\n                  type: \"hidden\"\r\n                }\r\n              ],\r\n              formUpdate: [\r\n                {\r\n                  name: \"name\",\r\n                  inputId: \"name\",\r\n                  labelName: \"Name:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  errorName: \"Please input Name\",\r\n                  inputType: \"varchar\",\r\n                  max: 120,\r\n                  ifRequired: true\r\n                },\r\n                {\r\n                  name: \"code\",\r\n                  inputId: \"code\",\r\n                  labelName: \"Code:\",\r\n                  errorName: \"Please input Code\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 50\r\n                },\r\n                {\r\n                  name: \"userName\",\r\n                  inputId: \"userName\",\r\n                  errorName: \"Please input Username\",\r\n                  labelName: \"Username:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"varchar\",\r\n                  max: 120  \r\n                },\r\n                 {\r\n                  name: \"mobileNo\",\r\n                  inputId: \"mobileNo\",\r\n                  errorName: \"Please input Mobile Number\",\r\n                  labelName: \"Mobile No.:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"number\",\r\n                  max: 12  \r\n                },\r\n                 {\r\n                  name: \"email\",\r\n                  inputId: \"email\",\r\n                  errorName: \"Please input a valid email\",\r\n                  labelName: \"Email:\",\r\n                  cardInputCol: \"col-md-6\",\r\n                  inputType: \"email\",\r\n                  max: 200\r\n                },\r\n              ],\r\n               formSelect: [{\r\n                  labelName: \"Branches:\",\r\n                  name: \"homeBranchHashId\",\r\n                  formSelectCol: \"col-md-6\",\r\n                  inputType: \"select\",\r\n                  callName: \"selectBranch\",\r\n                  errorName: \"Please select Branch\",\r\n                  options: JSON.parse(localStorage.getItem('listOfBranches')),\r\n                  defaultPlaceholder: \"Branches\",\r\n                  selectId: \"homeBranchHashId\",\r\n                  className: \"select form-control\",\r\n                  ifRequired: true\r\n                }],\r\n               uploadTextBox: [{\r\n                  name: \"photoUrl\",\r\n                  inputType: \"file\",\r\n                  labelName: \"Upload Photo:\",\r\n                  cardInputCol: \"col-12\",\r\n                  acceptUpload: \"image/x-png,image/jpeg\"\r\n              }],\r\n               cardButton: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Create\",\r\n                  callName: \"postData\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n             changePassBtn: [\r\n                {\r\n                  name: \"use\",\r\n                  uiName: \"Save\",\r\n                  callName: \"changePassword\",\r\n                  className: \"btn btn-primary\"\r\n                }\r\n              ],\r\n              iconColor: [\r\n                 {\r\n                     color: '#CBCBCB'\r\n                 }\r\n              ],\r\n              indexedFilter: {\r\n                status : \"A\"\r\n              },\r\n              filterObjectValue: this.$store.state.userGroupHashId,\r\n              filterObject: {\r\n                value: \"userGroup\",\r\n                property: \"hashId\"\r\n              },\r\n            \r\n        }\r\n    },\r\n  components: {\r\n      Navigation,\r\n      Sidebar,\r\n      Loader,\r\n      TableList,\r\n      FormBuilder\r\n  },\r\n  methods: {\r\n      stopSync: function () {\r\n          this.syncing = false\r\n      },\r\n      closeModal: function(){\r\n        this.$store.state.showModal = false\r\n        this.$store.state.showModalUpdate = false\r\n        this.$store.state.showModalChangePass = false\r\n        this.$store.state.loading = false\r\n        this.showModalUpdate = false\r\n      },\r\n      openModal: function (){\r\n        this.$store.state.showModal = true\r\n      },\r\n      openChangePassModal: function(hashId){\r\n        this.$store.state.selectedUserHash = hashId\r\n   \r\n      //  localStorage.setItem('selectedUserHash', hashId)\r\n        this.$store.state.showModalChangePass = true\r\n      },\r\n      getBranches () {\r\n          this.$store.dispatch('getBranches')\r\n      },\r\n      // async openModalUpdate (hashId){\r\n      //       this.showModalUpdate = true\r\n\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       localStorage.setItem('userHashUpdate', hashId)\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //       };\r\n      //       let res = await axios.get(apiDomain + 'users/' + hashId, axiosConfig)\r\n      //      .then((res) => {\r\n      //             document.getElementById(\"name\").value = res.data.name\r\n      //             document.getElementById(\"code\").value = res.data.code\r\n      //             document.getElementById(\"mobileNo\").value = res.data.mobileNo\r\n      //             document.getElementById(\"userName\").value= res.data.userName\r\n      //             document.getElementById(\"email\").value = res.data.email\r\n      //              if(res.data.photoUrl == \"\"){\r\n      //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\r\n      //             }\r\n      //             else if(res.data.photoUrl == null){\r\n      //             document.getElementById(\"imgPreview\").src = \"https://blog.stylingandroid.com/wp-content/themes/lontano-pro/images/no-image-slide.png\"\r\n      //             }else{\r\n      //             document.getElementById(\"imgPreview\").src = res.data.photoUrl\r\n      //            }\r\n      //       })\r\n      //      .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      // },\r\n      // async updateData(){\r\n      //           let hashId = await localStorage.getItem(\"userHashUpdate\");\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //           let domain = await localStorage.getItem(\"domain\");\r\n      //           let photoUrl;\r\n      //           let formData = new FormData();\r\n      //           if(this.file != null && this.file != \"\"){\r\n      //                  formData.append('file', this.file, this.file.name);\r\n                      \r\n      //                  let response = await axios.post(apiDomain + 'uploads/' + modelName,\r\n      //                   formData,\r\n      //                   {\r\n      //                   headers: {\r\n      //                       'Content-Type': 'multipart/form-data',\r\n      //                         \"Authorization\": \"Bearer \"+ token\r\n      //                     }\r\n      //                   })\r\n      //                   .then((response) => {\r\n      //                         photoUrl = \"http://\" + domain + response.data[0].photoUrl\r\n      //                         console.log(photoUrl);\r\n      //                   })\r\n      //                   .catch((err) => {\r\n      //                       console.log(\"AXIOS ERROR: \", err);\r\n      //                 })\r\n      //           }else{\r\n      //              photoUrl =  this.photoUrl\r\n      //           }\r\n                 \r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'users/' + hashId ,\r\n      //               data: {\r\n                      \r\n      //                   name:  document.getElementById(\"name\").value,\r\n      //                   code:  document.getElementById(\"code\").value,\r\n      //                   mobileNo:  document.getElementById(\"mobileNo\").value,\r\n      //                   userName:  document.getElementById(\"userName\").value,\r\n      //                   email:  document.getElementById(\"email\").value,\r\n      //                   photoUrl:  photoUrl\r\n      //               },\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               this.showModalUpdate = false;\r\n      //               alert(\"Succesfully Updated!\");\r\n      //                location.reload();\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      // },\r\n      // async blockUser (hashId) {\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'put',\r\n      //               url: apiDomain + 'users/' + hashId + '/block',\r\n      //               data: {status: \"B\"},\r\n      //               headers: {\r\n      //                   Authorization: 'Bearer ' + token\r\n      //               }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Blocked!\");\r\n      //                location.reload();\r\n\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  },\r\n       linkToParent: function(){\r\n          this.$router.push({ name: 'UserGroups' })\r\n       },\r\n   \r\n      // async changePassword () {\r\n\r\n      //           let token = await localStorage.getItem(\"apiToken\");\r\n      //           let userHash = await localStorage.getItem(\"selectedUserHash\");\r\n      //           let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //           let res = await axios({\r\n      //               method: 'post',\r\n      //               url: apiDomain + 'users/' + userHash + '/changepass',\r\n      //              data: {\r\n\t    //                 newPassword: document.getElementById(\"newPassword\").value\r\n      //              },\r\n      //              headers: {\r\n      //                 Authorization: 'Bearer ' + token\r\n      //             }\r\n      //           })\r\n      //           .then((res) => {\r\n      //               alert(\"Succesfully Changed!\");\r\n      //               this.showModalChangePass = false;\r\n      //                location.reload();\r\n      //           })\r\n      //           .catch((err) => {\r\n      //               console.log(\"AXIOS ERROR: \", err);\r\n      //           })\r\n      //  },\r\n       async selectedBranch () {\r\n              var e = document.getElementById(\"homeBranchHashId\");\r\n              var item = e.options[e.selectedIndex].value;\r\n              localStorage.setItem(\"homeBranchHashId\",item)\r\n\r\n              if ( document.getElementById('homeBranchHashId').value !== \"\"){\r\n                 document.getElementById(\"homeBranchHashId\").classList.remove('is-invalid');\r\n             }\r\n       },\r\n      //  validation: function(e){\r\n\r\n      //     let password =  document.getElementById(\"password\").value;\r\n      //     let confirmPassword =  document.getElementById(\"confirmPassword\").value;\r\n      //     let email =  document.getElementById(\"email\").value;\r\n      //     let re = /[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}/igm;\r\n\r\n      //     const form = document.querySelector('form');\r\n      //     var txt = \"\";\r\n      //     for (var i = 0; i < form.length; i++) {\r\n      //         if(form.elements[i].value ==\"\"){\r\n      //             form.elements[i].classList.add('is-invalid')\r\n      //         }\r\n      //     }\r\n\r\n      //     if(password == \"\" && confirmPassword == \"\"){\r\n      //           document.getElementById(\"password\").classList.add('is-invalid');\r\n      //            document.getElementById(\"confirmPassword\").classList.add('is-invalid');\r\n      //     }else{\r\n      //           document.getElementById(\"password\").classList.remove('is-invalid');\r\n      //           document.getElementById(\"confirmPassword\").classList.remove('is-invalid');\r\n\r\n      //           if(document.getElementById(\"password\").value!=document.getElementById(\"confirmPassword\").value){\r\n      //                   document.getElementById(\"confirmPassword\").classList.add('is-invalid');\r\n      //           }else{\r\n      //                   document.getElementById(\"confirmPassword\").classList.remove('is-invalid');\r\n      //           }\r\n      //     }\r\n\r\n      //     if (email == '' || !re.test(email))\r\n      //     {\r\n      //         document.getElementById(\"email\").classList.add('is-invalid');\r\n      //         return false;\r\n      //     }\r\n       \r\n      //     this.saveNewData();\r\n\r\n      //  },\r\n      //   async saveNewData (){\r\n      //       let token = await localStorage.getItem(\"apiToken\");\r\n      //       let apiDomain = await localStorage.getItem(\"apiDomain\");\r\n      //       let modelName = await localStorage.getItem(\"currentModelPage\")\r\n      //       let domain = await localStorage.getItem(\"domain\");\r\n      //       let formData = new FormData();\r\n      //       let photoUrl;\r\n      //       if(this.file != null && this.file != \"\"){\r\n      //               formData.append('file', this.file, this.file.name);\r\n                  \r\n      //               let response = await axios.post(apiDomain + 'uploads/' + modelName,\r\n      //               formData,\r\n      //               {\r\n      //               headers: {\r\n      //                   'Content-Type': 'multipart/form-data',\r\n      //                     \"Authorization\": \"Bearer \"+ token\r\n      //                 }\r\n      //               })\r\n      //               .then((response) => {\r\n      //                     photoUrl = \"http://\" + domain + response.data[0].photoUrl\r\n      //               })\r\n      //               .catch((err) => {\r\n      //                   console.log(\"AXIOS ERROR: \", err);\r\n      //             })\r\n\r\n      //       }else{\r\n      //           photoUrl = this.photoUrl\r\n      //       }\r\n\r\n      //       let  postData = {\r\n      //             name:  document.getElementById(\"name\").value,\r\n      //             code:  document.getElementById(\"code\").value,\r\n      //             mobileNo:  document.getElementById(\"mobileNo\").value,\r\n      //             userName:  document.getElementById(\"userName\").value,\r\n      //             email:  document.getElementById(\"email\").value,\r\n      //             password:  document.getElementById(\"password\").value,\r\n      //             homeBranchHashId: localStorage.getItem(\"homeBranchHashId\"),\r\n      //             userGroupHashId: localStorage.getItem(\"userGroupHashId\"),\r\n      //             photoUrl: photoUrl\r\n      //       }\r\n\r\n      //       let axiosConfig = {\r\n      //           headers: {\r\n      //               \"Authorization\": \"Bearer \"+ token\r\n      //           }\r\n      //         };\r\n\r\n      //       let res = await axios.post(apiDomain + 'users', postData, axiosConfig)\r\n      //         .then((res) => {\r\n      //            console.log(\"RESPONSE RECEIVED: \", res);\r\n      //            document.getElementById(\"name\").value = \"\";\r\n      //            document.getElementById(\"code\").value = \"\";\r\n      //            document.getElementById(\"mobileNo\").value = \"\";\r\n      //            document.getElementById(\"userName\").value = \"\";\r\n      //            document.getElementById(\"email\").value = \"\";\r\n      //            document.getElementById(\"password\").value = \"\";\r\n      //            alert(\"Succesfully Added!\");\r\n      //            this.showModal = false;\r\n      //             location.reload();\r\n      //       })\r\n      //         .catch((err) => {\r\n      //         console.log(\"AXIOS ERROR: \", err);\r\n      //      })\r\n      \r\n         \r\n      // }\r\n  },\r\n  watch:{\r\n  },\r\n  computed: {\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n#listOfBranches {\r\n   border-color: #7808F7;\r\n   height: 41px;\r\n}\r\n.is-invalid {\r\n   border-color:red !important;\r\n   height: 41px;\r\n}\r\n.card-subtitle{\r\n    text-align: left;\r\n    font-size:14px;\r\n    margin-top: -25px;\r\n    margin-bottom: 30px;\r\n    letter-spacing: 0;\r\n    color:red !important;\r\n}\r\n.no-gutters{\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n}\r\n\r\n</style>"]}]}